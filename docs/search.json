{
  "articles": [
    {
      "path": "code_of_conduct.html",
      "author": [],
      "contents": "\n\nContents\nVereinbarung über Verhaltenskodex für Mitwirkende\nUnsere Verpflichtung\nUnsere Standards\nVerantwortlichkeiten bei der Durchsetzung\nGeltungsbereich\nUmsetzung\nDurchsetzungsrichtlinien\n1. Berichtigung\n2. Verwarnung\n3. Vorübergehender Ausschluss\n4. Dauerhafter Ausschluss\n\nBezug\n\n\nVereinbarung über Verhaltenskodex für Mitwirkende\nUnsere Verpflichtung\nWir als Mitglieder, Teilnehmende und Verantwortliche unserer Gemeinschaft verpflichten uns bei der Teilnahme an dem Projekt und unserer Gemeinschaft zu einer belästigungsfreien Erfahrung für alle, unabhängig von Alter, Körpergröße, Behinderung, ethnischer Zuordnung, geschlechtlicher Identität und Ausdruck, Grad der Erfahrung, Bildung, sozialem Status, Nationalität, persönlicher Erscheinung, Rasse, Religion oder Geschlechtsidentität und sexueller Orientierung.\nWir verpflichten uns, in einer Weise zu handeln und zu interagieren, die zu einer offenen, einladenden, vielfältigen, inklusiven und gesunden Gemeinschaft beiträgt.\nUnsere Standards\nBeispiele für Verhaltensweisen, die zu einem positiven Umfeld für unsere Gemeinschaft beitragen, sind:\nEinfühlungsvermögen und Freundlichkeit gegenüber anderen Menschen zeigen\nUnterschiedliche Meinungen, Standpunkte und Erfahrungen respektieren\nKonstruktives Feedback geben und würdevoll annehmen\nVerantwortung übernehmen und uns bei denjenigen entschuldigen, die von unseren Fehlern betroffen sind, und aus den Erfahrungen lernen\nKonzentration auf das, was nicht nur für uns als Individuen, sondern für die gesamte Gemeinschaft das Beste ist\nBeispiele für inakzeptables Verhalten sind:\nDie Verwendung sexualisierter Sprache, Bilder oder Symbolik sowie unerwünschte Versuche sexueller Annäherung\nBeleidigende oder abwertende Kommentare, persönliche oder politische Angriffe und trollen\nÖffentliche oder private Belästigungen\nDas Veröffentlichen von privaten Informationen Anderer, wie zum Beispiel physische oder elektronische Adressen, ohne deren ausdrückliche Erlaubnis\nAnderes Verhalten, welches in einem professionellen Umfeld begründet als unangemessen betrachtet werden kann\nVerantwortlichkeiten bei der Durchsetzung\nDie Gemeinschaftsleitung ist verantwortlich dafür, unsere Standards für ein akzeptables Benehmen klarzustellen und werden angemessen und fair korrigierende Maßnahmen ergreifen um auf jegliches Verhalten, das sie für unangemessen, bedrohlich oder beleidigend halten, zu reagieren.\nDie Gemeinschaftsleitung hat das Recht und die Verantwortung Kommentare, Commits, Code, Wiki-Bearbeitungen, Support-Tickets und andere Beiträge, die nicht mit diesem Verhaltenskodex vereinbar sind zu entfernen, zu bearbeiten oder abzulehnen, und werden die Gründe für eine Mäßigung mitteilen, wenn es angebracht ist.\nGeltungsbereich\nDieser Verhaltenskodex gilt für alle Gemeinschaftsbereiche und gilt auch, wenn eine Einzelperson die Gemeinschaft offiziell in öffentlichen Bereichen vertritt. Beispiele für die Repräsentation unserer Gemeinschaft sind die Verwendung einer offiziellen E-Mail-Adresse, das Posten über ein offizielles Social-Media-Konto oder das Auftreten als ernannte Vertretung bei einer Online- oder Offline-Veranstaltung.\nUmsetzung\nFälle von missbräuchlichem, belästigendem oder anderweitig inakzeptablem Verhalten können unter [lars@lse.de] der für die Durchsetzung zuständigen Gemeinschaftsleitung gemeldet werden. Alle Beschwerden werden zeitnah und fair geprüft und ermittelt.\nDie gesamte Gemeinschaftsleitung ist verpflichtet, die Privatsphäre und die Sicherheit derjenigen, die einen Vorfall gemeldet haben, zu respektieren.\nDurchsetzungsrichtlinien\nDie Gemeinschaftsleitung wird sich bei der Bestimmung der Konsequenzen für jede Handlung, die ihrer Ansicht nach gegen diesen Verhaltenskodex verstößt, an diese Richtlinien über die Auswirkungen in der Gemeinschaft halten:\n1. Berichtigung\nAuswirkungen in der Gemeinschaft: Verwendung unangemessener Sprache oder anderes Verhalten, das in der Gemeinschaft als unprofessionell oder unwillkommen gilt.\nFolge: Eine private, schriftliche Verwarnung der Gemeinschaftsleitung, die Klarheit über die Art des Verstoßes und eine Erklärung dafür bietet, warum das Verhalten unangemessen war. Eine öffentliche Entschuldigung kann verlangt werden.\n2. Verwarnung\nAuswirkungen in der Gemeinschaft: Eine Verletzung durch einen einzelnen Vorfall oder eine Reihe von Handlungen.\nFolge: Eine Warnung mit Konsequenzen bei wiederholtem Fehlverhalten. Keine Interaktion mit den beteiligten Personen, einschließlich unaufgeforderter Interaktion mit denjenigen, die den Verhaltenskodex durchsetzen, für einen bestimmten Zeitraum. Dazu gehört die Vermeidung von Interaktionen in Gemeinschaftsräumen sowie in externen Kanälen wie sozialen Medien. Ein Verstoß gegen diese Bedingungen kann zu einem vorübergehenden oder dauerhaften Verbot führen.\n3. Vorübergehender Ausschluss\nAuswirkungen in der Gemeinschaft: Eine schwerwiegende Verletzung von Gemeinschaftsstandards, einschließlich anhaltend unangemessenen Verhaltens.\nFolge: Ein zeitlich begrenztes Verbot jeglicher Art von Interaktion oder öffentlicher Kommunikation mit der Gemeinschaft. Während dieses Zeitraums ist keine öffentliche oder private Interaktion mit den beteiligten Personen erlaubt. Auch keine unaufgeforderte Interaktion mit denjenigen, die den Verhaltenskodex durchsetzen. Ein Verstoß gegen diese Bedingungen kann zu einem dauerhaften Verbot führen.\n4. Dauerhafter Ausschluss\nAuswirkungen in der Gemeinschaft: Aufzeigen eines Musters von Verletzungen der Gemeinschaftsstandards, einschließlich anhaltend unangemessenen Verhaltens, Belästigung einer Person oder Aggression gegen oder Herabsetzung von Gruppen von Personen.\nFolge: Ein dauerhaftes Verbot jeglicher Art von öffentlicher Interaktion innerhalb der Gemeinschaft.\nBezug\nDieser Verhaltenskodex basiert auf dem Contributor Covenant, Version 2.0, verfügbar unter https://www.contributor-covenant.org/de/version/2/0/code-of-conduct\n\n\n\n",
      "last_modified": "2021-08-24T15:12:42+02:00"
    },
    {
      "path": "code_of_conduct.html",
      "title": "Code of Conduct",
      "author": [],
      "contents": "\n\nContents\nVereinbarung über Verhaltenskodex für Mitwirkende\nUnsere Verpflichtung\nUnsere Standards\nVerantwortlichkeiten bei der Durchsetzung\nGeltungsbereich\nUmsetzung\nDurchsetzungsrichtlinien\n1. Berichtigung\n2. Verwarnung\n3. Vorübergehender Ausschluss\n4. Dauerhafter Ausschluss\n\nBezug\n\n\nVereinbarung über Verhaltenskodex für Mitwirkende\nUnsere Verpflichtung\nWir als Mitglieder, Teilnehmende und Verantwortliche unserer Gemeinschaft verpflichten uns bei der Teilnahme an dem Projekt und unserer Gemeinschaft zu einer belästigungsfreien Erfahrung für alle, unabhängig von Alter, Körpergröße, Behinderung, ethnischer Zuordnung, geschlechtlicher Identität und Ausdruck, Grad der Erfahrung, Bildung, sozialem Status, Nationalität, persönlicher Erscheinung, Rasse, Religion oder Geschlechtsidentität und sexueller Orientierung.\nWir verpflichten uns, in einer Weise zu handeln und zu interagieren, die zu einer offenen, einladenden, vielfältigen, inklusiven und gesunden Gemeinschaft beiträgt.\nUnsere Standards\nBeispiele für Verhaltensweisen, die zu einem positiven Umfeld für unsere Gemeinschaft beitragen, sind:\nEinfühlungsvermögen und Freundlichkeit gegenüber anderen Menschen zeigen\nUnterschiedliche Meinungen, Standpunkte und Erfahrungen respektieren\nKonstruktives Feedback geben und würdevoll annehmen\nVerantwortung übernehmen und uns bei denjenigen entschuldigen, die von unseren Fehlern betroffen sind, und aus den Erfahrungen lernen\nKonzentration auf das, was nicht nur für uns als Individuen, sondern für die gesamte Gemeinschaft das Beste ist\nBeispiele für inakzeptables Verhalten sind:\nDie Verwendung sexualisierter Sprache, Bilder oder Symbolik sowie unerwünschte Versuche sexueller Annäherung\nBeleidigende oder abwertende Kommentare, persönliche oder politische Angriffe und trollen\nÖffentliche oder private Belästigungen\nDas Veröffentlichen von privaten Informationen Anderer, wie zum Beispiel physische oder elektronische Adressen, ohne deren ausdrückliche Erlaubnis\nAnderes Verhalten, welches in einem professionellen Umfeld begründet als unangemessen betrachtet werden kann\nVerantwortlichkeiten bei der Durchsetzung\nDie Gemeinschaftsleitung ist verantwortlich dafür, unsere Standards für ein akzeptables Benehmen klarzustellen und werden angemessen und fair korrigierende Maßnahmen ergreifen um auf jegliches Verhalten, das sie für unangemessen, bedrohlich oder beleidigend halten, zu reagieren.\nDie Gemeinschaftsleitung hat das Recht und die Verantwortung Kommentare, Commits, Code, Wiki-Bearbeitungen, Support-Tickets und andere Beiträge, die nicht mit diesem Verhaltenskodex vereinbar sind zu entfernen, zu bearbeiten oder abzulehnen, und werden die Gründe für eine Mäßigung mitteilen, wenn es angebracht ist.\nGeltungsbereich\nDieser Verhaltenskodex gilt für alle Gemeinschaftsbereiche und gilt auch, wenn eine Einzelperson die Gemeinschaft offiziell in öffentlichen Bereichen vertritt. Beispiele für die Repräsentation unserer Gemeinschaft sind die Verwendung einer offiziellen E-Mail-Adresse, das Posten über ein offizielles Social-Media-Konto oder das Auftreten als ernannte Vertretung bei einer Online- oder Offline-Veranstaltung.\nUmsetzung\nFälle von missbräuchlichem, belästigendem oder anderweitig inakzeptablem Verhalten können unter [lars@lse.de] der für die Durchsetzung zuständigen Gemeinschaftsleitung gemeldet werden. Alle Beschwerden werden zeitnah und fair geprüft und ermittelt.\nDie gesamte Gemeinschaftsleitung ist verpflichtet, die Privatsphäre und die Sicherheit derjenigen, die einen Vorfall gemeldet haben, zu respektieren.\nDurchsetzungsrichtlinien\nDie Gemeinschaftsleitung wird sich bei der Bestimmung der Konsequenzen für jede Handlung, die ihrer Ansicht nach gegen diesen Verhaltenskodex verstößt, an diese Richtlinien über die Auswirkungen in der Gemeinschaft halten:\n1. Berichtigung\nAuswirkungen in der Gemeinschaft: Verwendung unangemessener Sprache oder anderes Verhalten, das in der Gemeinschaft als unprofessionell oder unwillkommen gilt.\nFolge: Eine private, schriftliche Verwarnung der Gemeinschaftsleitung, die Klarheit über die Art des Verstoßes und eine Erklärung dafür bietet, warum das Verhalten unangemessen war. Eine öffentliche Entschuldigung kann verlangt werden.\n2. Verwarnung\nAuswirkungen in der Gemeinschaft: Eine Verletzung durch einen einzelnen Vorfall oder eine Reihe von Handlungen.\nFolge: Eine Warnung mit Konsequenzen bei wiederholtem Fehlverhalten. Keine Interaktion mit den beteiligten Personen, einschließlich unaufgeforderter Interaktion mit denjenigen, die den Verhaltenskodex durchsetzen, für einen bestimmten Zeitraum. Dazu gehört die Vermeidung von Interaktionen in Gemeinschaftsräumen sowie in externen Kanälen wie sozialen Medien. Ein Verstoß gegen diese Bedingungen kann zu einem vorübergehenden oder dauerhaften Verbot führen.\n3. Vorübergehender Ausschluss\nAuswirkungen in der Gemeinschaft: Eine schwerwiegende Verletzung von Gemeinschaftsstandards, einschließlich anhaltend unangemessenen Verhaltens.\nFolge: Ein zeitlich begrenztes Verbot jeglicher Art von Interaktion oder öffentlicher Kommunikation mit der Gemeinschaft. Während dieses Zeitraums ist keine öffentliche oder private Interaktion mit den beteiligten Personen erlaubt. Auch keine unaufgeforderte Interaktion mit denjenigen, die den Verhaltenskodex durchsetzen. Ein Verstoß gegen diese Bedingungen kann zu einem dauerhaften Verbot führen.\n4. Dauerhafter Ausschluss\nAuswirkungen in der Gemeinschaft: Aufzeigen eines Musters von Verletzungen der Gemeinschaftsstandards, einschließlich anhaltend unangemessenen Verhaltens, Belästigung einer Person oder Aggression gegen oder Herabsetzung von Gruppen von Personen.\nFolge: Ein dauerhaftes Verbot jeglicher Art von öffentlicher Interaktion innerhalb der Gemeinschaft.\nBezug\nDieser Verhaltenskodex basiert auf dem Contributor Covenant, Version 2.0, verfügbar unter https://www.contributor-covenant.org/de/version/2/0/code-of-conduct\n\n\n\n",
      "last_modified": "2021-08-24T15:12:42+02:00"
    },
    {
      "path": "ha-01-hallo-git.html",
      "title": "Hausaufgabe 01 - Hallo Git!",
      "author": [],
      "contents": "\n\nContents\nVerbindung zu GitHub und RStudio Cloud aufbauen\nErste Schritte\nAufwärmen\nYAML\nÄnderungen schreiben (commit)\nÄnderungen schieben (push)\n\nR Packages\nDaten\n\nÜbungen\nÜbung 1\nÜbung 2\nÜbung 3\nÜbung 4\nÜbung 5 (Bonus)\nÜbung 6 (Bonus)\n\n\nDas Hauptziel dieser Hausaufgabe ist es, dich mit R und RStudio bekannt zu machen. Ein zusätzliches Ziel ist es, dich in Git und GitHub einzuführen, das Kollaborations- und Versionskontrollsystem, das wir während des Kurses benutzen werden.\nIch ermutige dich im Laufe der Übungen über das hinauszugehen was die Übungen vorgeben. Die Bereitschaft zu experimentieren wird dich zu einer besseren Programmierin machen. Bevor wir soweit sind, ist es wichtig, dass du dir ein paar grundlegende Kenntnisse in R aneignest.\nHeute beginnen wir mit den grundlegenden Bausteinen von R und RStudio: die Benutzeroberfläche, das Einlesen von Daten und grundlegende Befehle.\nDieses erste Hausaufgabe wird von dir allein durchgeführt. In zukünfitgen Hausaufgabeen (oder auch Praktika) wirst du lernen, wie du auf GitHub in kleinen Teams zusammenarbeitest und einen Bericht für dein Team erstellst.\nVerbindung zu GitHub und RStudio Cloud aufbauen\nDu solltest eine Einladung erhalten haben, um der GitHub Organisation für diesen Kurs beizutreten. Diese Einladung musst du annehmen, bevor du mit dem nächsten Schritt fortfährst.\nÖffne deine Email welche du für deinen GitHub Konto hinterlegt hast\nKlicke auf “Join”\n\n\n\nUm deine RStudio und GitHub Konten zu verbinden, befolge die folgenden Schritte:\nÖffne rstudio.cloud und login mit deinem Benutzerkonto (nutze GitHub)\nKlicke auf deinen Namen in der oberen rechten Ecke, um das rechte Menü zu öffnen.\nKlicke dann auf “Authentication”.\n\n\n\nAktiviere im Fenster Authentifizierung das Kontrollkästchen für Enabled neben GitHub.\n\n\n\nIm nächsten Fenster klickst du auf das grüne Kästchen mit der Aufschrift “Authorize rstudio”.\n\n\n\nZurück im Authentifizierungsfenster in RStudio Cloud aktivierst du nun auch das Kästchen Private repo access also enabled\n\n\n\nWichtig: Falls Feld Organisation access noch kein grünes Häkchen neben deinem Kursnamen auftaucht, klickst du nun zunächst auf “Request” neben deinem Kursnamen und folgend auf “Request approval from owners”.\nHinweis: Sollte hier kein Kurs auftauchen, könnte dies bedeueten, dass du die GitHub-Einladung zum Kurs noch nicht angenommen hast und du solltest zurückgehen und dies überprüfen und nacholen. Falls du keine Einladung hast, kontaktiere mich.\nNun noch auf das grüne Feld “Authorize rstudio” und nach Eingabe deines Passworts bist du bereit.\n\n\n\nSobald du fertig bist, sollten in RStudio Cloud beide Kästchen markiert sein.\n\n\n\nUm zu bestätigen, dass du deine GitHub- und RStudio-Cloud-Konten erfolgreich verknüpft hast, wähle GitHub settings > Applications. Du solltest RStudio als autorisierte App unter Authorized OAuth Apps aufgelistet sehen. Falls nicht, ist dies ein guter Zeitpunkt, um eine Frage zu stellen.\n\n\n\nErste Schritte\nJede deiner Aufgaben wird mit den folgenden Schritten beginnen, welche hier im Detail beschrieben sind. In Zukunft wird jede Aufgabe mit einem Abschnitt “Erste Schritte” beginnen, aber mit etwas weniger Details. Du kannst jedoch jederzeit auf diese Hausaufgabe zurückgreifen, um eine detaillierte Liste der Schritte zu erhalten, die notwendig sind, um mit einer Aufgabe zu beginnen.\nKlicke auf den Link welchen ich in einer E-Mail mit dem Betreff (Lars hat das Repo XYZ-Dein-GitHub-Name auf GitHub erstellt) mit dir geteilt habe\nDies führt dich zu deinem persönlichen GitHub Repository (im Folgenden “Repo” genannt)\nDieses Repository enthält eine R Markdown (ha-01.Rmd) Vorlage, auf der du aufbauen kannst, um die Aufgabe zu lösen.\nAuf GitHub klickst du auf den grünen Code Button und wählst HTTPS wie im Bild unten. Klicke auf das Klemmbrett-Symbol, um die Repo-URL zu kopieren.\n\n\n\nÖffne nun RStudio Cloud und den Workspace für den Kurs. Klicke auf den Abwärtspfeil und erstelle ein New Project from Git Repository.\n\n\n\nFüge die URL aus deinem Repo oben in das Dialogfeld ein und stelle sicher, dass das Häkchen bei “Packages” gesetzt ist.\n\n\n\n\n\n\nKlicke auf OK, habe etwas Geduld, und du bist bereit zum logslegen!\nAufwärmen\nBevor wir uns die Daten anschauen, machen wir noch ein paar Aufwärmübungen um die R Markdown vorzustellen.\nYAML\nIm RStudio Cloud Workspace für den Kurs, klicke auf “Projects”\nÖffne dein Projekt in dem du darauf klickst (ha01-GitHubName)\nÖffne die R Markdown (ha-01.Rmd) Datei in deinem Projekt (Tipp: Sie befindet sich in dem Ansichtsfenster unten rechts unter dem Reiter “Files”)\nÄndere den Autorennamen zu deinem Namen, füge ein Datum hinzu und stricke (‘knit’) das Dokument.\n\n\n\n\n\n\nDer obere Teil deiner R Markdown Datei (zwischen den drei gestrichelten Linien) wird YAML genannt. Es steht für “YAML Ain’t Markup Language”. Es ist ein menschenfreundlicher Standard zur Serialisierung von Daten für alle Programmiersprachen. Alles, was du wissen musst, ist, dass dieser Bereich YAML genannt wird (wir werden ihn als solchen bezeichnen) und dass er Metainformationen über dein Dokument enthält.\nÄnderungen schreiben (commit)\nIn deinem RStudio, öffne das Fenster mit dem Titel Git im Ansichtsfenster oben rechts.\nWenn du Änderungen an deiner Rmd-Datei gemacht hast, solltest du nun hier den Dateinamen sehen. Wähle die Datei aus der Liste aus indem du sie anklickst. Dann klicke auf Diff über den Dateinamen.\nEin neues Fenster öffnet sich welche dir die Differenz zwischen dem letzten commit-Zustand des Dokuments (rot) und dem aktuellen aktuellen Zustand zeigt (grün), welcher deine Änderungen beinhaltet.\nWenn du mit diesen Änderungen zufrieden bist, klicke auf das Kontrollkästchen neben dem Dateinamen um einen Haken zu setzen und schreibe “Aktualisiere Autorenname und Datum” in das Feld Commit message. Klicke anschliessend auf Commit.\n\n\n\nDu musst nicht nach jeder Änderung committen, sondern Zustände, die für dich bedeutsam sind, um sie zu überprüfen, zu vergleichen oder wiederherzustellen.\nIn den ersten paar Aufgaben werden wir dir genau sagen, wann und mit welchem Text du committen solltest. Im weiteren Verlauf des Kurses wirst du diese Entscheidungen dann selbst treffen.\nÄnderungen schieben (push)\nJetzt, wo du ein Update gemacht und diese Änderung committed hast, ist es an der Zeit, diese Änderungen ins Web zu pushen!\nOder genauer gesagt, in dein Repo auf GitHub. Warum das? Damit Andere deine Änderungen sehen können. Und mit Anderen meinen wir das Kursteam (deine Repos in diesem Kurs sind für dich und uns privat).\nDoch bevor du dies ausführen kannst, musst du noch einen GitHub Personal Access Token (PAT) setzen und für dich speichern. GitHub erlaubt diesen Zugang über externe Applikationen seit dem 13. August 2021 nicht mehr über das Benutzerpasswort. Die Anweisungen um einen PAT zu erstellen findest du hier:\nhttps://github.com/rstatsZH/kochbuch/tree/main/05-github-pat\nUm deine Änderungen nun auf GitHub zu pushen, klicke auf Push. Daraufhin erscheint ein Dialogfenster, in dem du zuerst deinen Benutzernamen und dann deinen erstellen Personal Access Token (PAT).\n\n\n\nR Packages\nIn dieser Hausaufgabe werden wir mit zwei R Packages arbeiten: datasauRus, welches den Datensatz enthält, den wir verwenden werden und tidyverse. Diese Packages sind bereits für dich installiert. Du kannst sie laden indem du den folgenden Code-chunk in deiner R Markdown Datei ausführst.\n\n\nlibrary(tidyverse) \nlibrary(datasauRus)\n\n\n\nBeachte, dass die Packages auch mit den gleichen Befehlen in deinem R Markdown Dokument geladen werden.\nDaten\nDer Datensatz, mit dem wir heute arbeiten werden, heißt datasaurus_dozen und befindet sich im R Package datasauRus. Eigentlich enthält dieser einzelne Datensatz 13 weitere Datensätze, die uns zeigen sollen, warum Datenvisualisierung wichtig ist und wie zusammenfassende Statistiken allein irreführend sein können. Die verschiedenen Datensätze sind durch die Variable dataset (Spalte) gekennzeichnet.\nUm mehr über das Dataset herauszufinden, gib folgendes in deine Console ein: ?datasaurus_dozen. Ein Fragezeichen vor dem Namen eines Objekts ruft immer dessen Hilfedatei auf. Ich habe für dich auch einen Code-chunk hinzugefügt welcher den Code enthält um die Hilfe-Datei für datasaurus_dozen zu öffnen.\nÜbungen\nÜbung 1\nÖffne die Hilfedatei für datasaurus_dozen\nWie viele Zeilen und wie viele Spalten hat der Datensatz datasaurus_dozen?\nWas sind die Variablen, die im Dataframe enthalten sind?\nFüge deine Antworten zu deinem R Markdown Bericht hinzu.\nSchauen wir uns an, was diese Datensätze sind. Dazu können wir eine Häufigkeitstabelle (frequency table) der dataset Variable erstellen:\n\n\ndatasaurus_dozen %>% \n  group_by(dataset) %>% \n  count() \n\n\n# A tibble: 13 x 2\n# Groups:   dataset [13]\n   dataset        n\n   <chr>      <int>\n 1 away         142\n 2 bullseye     142\n 3 circle       142\n 4 dino         142\n 5 dots         142\n 6 h_lines      142\n 7 high_lines   142\n 8 slant_down   142\n 9 slant_up     142\n10 star         142\n11 v_lines      142\n12 wide_lines   142\n13 x_shape      142\n\nDer ursprüngliche Datasaurus (dino) wurde von Alberto Cairo in diesem großartigen Blogpost erstellt. Das andere Dutzend wurde mit Hilfe von Simulated Annealing generiert und der Prozess wird in dem Paper Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics through Simulated Annealing1 von Justin Matejka und George Fitzmaurice beschrieben. In dem Paper simulieren die Autoren eine Vielzahl von Datensätzen, die die gleichen zusammenfassenden Statistiken wie der Datasaurus haben, aber sehr unterschiedliche Verteilungen aufweisen.\n🧶 ✅ ⬆️ Knit, commit und push deine Änderungen auf GitHub mit der Commit-Nachricht “Füge Antwort für Übung 1 hinzu.” Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\nÜbung 2\nUnten findest du den Code, den du brauchst, um diese nächste Übunge zu lösen. Die Antworten für 1 und 2 sind schon gegeben und auch in deiner R Markdown Datei enthalten.\nPlot y gegen x für den dino Datensatz (Code ist in R Markdown Datei)\nBerechne dann den Korrelationskoeffizienten zwischen “x” und “y” für diesen Datensatz. (Code ist in R Markdown Datei)\nKlicke auf knit um das Dokument zu stricken\nCode vorlesen\nHier siehst du neuen Code, welchen wir noch nicht im Kurs behandelt haben. Dieser kann folgendermassen gelesen werden:\nBeginne mit dem datasaurus_dozen und leite es in die Funktion filter, um nach Beobachtungen zu filtern, bei denen dataset == \"dino\" ist. Speichere den resultierenden gefilterten Dataframe als einen Dataframe namens dino_data.\n\n\ndino_data <- datasaurus_dozen %>%\n  filter(dataset == \"dino\")\n\n\n\nHier geht eine ganze Menge vor sich, also lassen wir es langsam angehen und nehmen es Schritt für Schritt auseinander.\nErstens, der Pipe-Operator: %>%, nimmt das, was davor kommt und sendet es als erstes Argument an das, was danach kommt. Hier sagen wir also, dass wir den datasaurus_dozen Dataframe nach Beobachtungen filtern, bei denen dataset == \"dino\" ist.\nZweitens, der Zuweisungsoperator: <-, weist dem gefilterten Dataframe den Namen dino_data zu.\nAls nächstes wollen wir diese Daten visualisieren. Dafür verwenden wir die Funktion ggplot(). Das erste Argument sind die Daten, die wir visualisieren wollen. Als nächstes definieren wir die aesthetischen Mappings (visuelle Eigenschaften). In anderen Worten, die Spalten der Daten, die auf bestimmte visuelle Eigenschaften des Plots abgebildet werden, z.B. wird die x-Achse die Variable namens x und die y-Achse die Variable namens y repräsentieren.\nDann fügen wir eine weitere Ebene zu diesem Diagramm hinzu, in der wir definieren, welche geometrischen Formen wir verwenden wollen, um jede Beobachtung in den Daten darzustellen. In diesem Fall wollen wir, dass es sich um Punkte handelt, daher geom_point().\n\n\nggplot(data = dino_data, mapping = aes(x = x, y = y)) +\n  geom_point()\n\n\n\n\nNächste Woche wirst du mehr über die Philosophie der Datenvisualisierung in Layern erfahren. Für den Moment kannst du dem Code folgen, welcher dir zur Verfügung gestellt wird.\nFür den zweiten Teil dieser Übungen müssen wir eine zusammenfassende Statistik berechnen: den Korrelationskoeffizienten. Der Korrelationskoeffizient, in der Statistik oft als \\(r\\) bezeichnet, misst den linearen Zusammenhang zwischen zwei Variablen.\nDu wirst sehen, dass einige der Variablenpaare, die wir darstellen, keinen linearen Zusammenhang zwischen ihnen haben. Das ist genau der Grund, warum wir zuerst visualisieren wollen: visualisieren, um die Form der Beziehung zu beurteilen, und \\(r\\) nur berechnen, wenn es relevant ist.\nIn diesem Fall macht die Berechnung eines Korrelationskoeffizienten wirklich keinen Sinn, da die Beziehung zwischen x und y definitiv nicht linear ist - sie ist dinosaurierhaft!\nAber zur Veranschaulichung lass uns den Korrelationskoeffizienten zwischen “x” und “y” berechnen.\nBeginne mit dino_data und berechne eine zusammenfassende Statistik, die wir r nennen werden, als die Beziehung (cor) zwischen x und y.\n\n\ndino_data %>%\n  summarize(r = cor(x, y))\n\n\n# A tibble: 1 x 1\n        r\n    <dbl>\n1 -0.0645\n\n🧶 ✅ ⬆️ Knit, commit, und pushe deine Änderungen auf GitHub mit der Commit-Nachricht “Füge Antwort für Übung 2 hinzu.” Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\nÜbung 3\nPlotte y gegen x für den star Datensatz.\nDu kannst (und solltest) den Code, den wir oben genutzt, wiederverwenden, ersetze den Namen des Datensatzes durch den gewünschten Datensatz. Berechne dann den Korrelationskoeffizienten zwischen “x” und “y” für diesen Datensatz. Wie ist dieser Wert im Vergleich zu r von dino?\n🧶 ✅ ⬆️ Dies ist ein weiterer guter Ort, um zu pausieren, zu stricken (knit), Änderungen mit der Commit-Nachricht “Füge Antwort für Übung 3 hinzu.” zu committen und zu pushen. Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\nÜbung 4\nPlotte y gegen x für den circle Datensatz.\nDu kannst (und solltest) den Code, den wir oben genutzt, wiederverwenden, ersetze den Namen des Datensatzes durch den gewünschten Datensatz. Berechne dann den Korrelationskoeffizienten zwischen “x” und “y” für diesen Datensatz. Wie ist dieser Wert im Vergleich zu r von dino?\n🧶 ✅ ⬆️ Du kannst erneut pausieren, die Änderungen mit der Commit-Nachricht “Füge Antwort für Übung 4 hinzu.” committen und pushen. Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\nSuper! Ich hoffe, dass du es schaffst in der Hausaufgabe bis hierhin zu kommen. Die nächsten beiden Übungen sind Bonus Übungen falls du Lust hast noch etwas weiter zu arbeiten.\nÜbung 5 (Bonus)\nZum Schluss wollen wir alle Datensätze auf einmal darstellen. Um dies zu tun, werden wir Method für eine Facettierung nutzen.\nMit einer Facette (facet) durich die Variable dataset, platzieren wir die Plots in einem Raster aus drei Spalten, entfernen die Legende und geben der Variable dataset eine visuelle Eigenschaft (aesthetic) indem wir es dem Argument ‘color’ zuordnen.\n\n\nggplot(datasaurus_dozen, aes(x = x, y = y, color = dataset))+\n  geom_point()+\n  facet_wrap(~ dataset, ncol = 3) +\n  theme(legend.position = \"none\")\n\n\n\nUnd wir können die Funktion group_by() in Kombination mit der Funktion summarize() verwenden, um alle zusammenfassenden Korrelationskoeffizienten zu erzeugen.\n\n\ndatasaurus_dozen %>%\n  group_by(dataset) %>%\n  summarize(r = cor(x, y)) \n\n\n\nÜbung 6 (Bonus)\nGratulation! Du hast die Übungen abgeschlossen. Zwei Dinge noch:\n\n\n\n(1) Ändere die Grösse deiner Abbildungen\nKlicke auf das Zahnradsymbol oben im R Markdown Dokument und wähle “Output Options…” im Dropdown-Menü. In dem sich öffnenden Dialogfenster gehst du zum Reiter “Figures” und änderst die Höhe und Breite der Figuren und klickst auf “OK”, wenn du fertig bist. Dann stricke dein Dokument und schaue, wie dir die neuen Größen gefallen. Ändere und stricke wieder und wieder, bis du mit den Figurengrößen zufrieden bist. Schau dir den YAML-Header an und beachte, dass diese Werte dort gespeichert werden, was bedeutet dass du diese auch hier ändern kannst.\n\n\n\nDu kannst auch verschiedene Größen für unterschiedliche Abbildungen verwenden. Klicke dazu auf das Zahnradsymbol innerhalb des Chunks, in dem du eine Änderung vornehmen möchtest. Das Ändern der Abbildungsgrößen hat neue Optionen zu diesen Chunks hinzugefügt: fig.width und fig.height. Du kannst sie auch ändern, indem du verschiedene Werte direkt in deinem R Markdown Dokument definierst.\n\n\n\n(2) Ändere das Aussehen deines Berichts:\nKlicke erneut auf das Zahnradsymbol oben im R Markdown Dokument und wähle “Output Options…” im Dropdown-Menü. Probiere im Reiter “General” des sich öffnenden Dialogfeldes verschiedene Optionen für die Syntaxhervorhebung (Syntax Highlighting) und das Design (Appl,y theme) aus. Klicke auf OK und stricke dein Dokument. Du kannst mit diesen Optionen herumspielen, bis du mit dem Aussehen zufrieden bist.\nBravo, du bist fertig! Übertrage alle verbleibenden Änderungen, verwende die Commit-Nachricht \"Fertig mit Hausaufgabe 1! \" und pushe. Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist. Bevor du die Aufgabe beendest, stelle sicher, dass alle Dokumente in deinem GitHub Repository aktualisiert sind.\n\nMatejka, Justin, and George Fitzmaurice. “Same stats, different graphs: Generating datasets with varied appearance and identical statistics through simulated annealing.” Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems. ACM, 2017.↩︎\n",
      "last_modified": "2021-08-24T15:12:45+02:00"
    },
    {
      "path": "ha-02-hallo-ogd.html",
      "title": "Hausaufgabe 02 - Hallo Open (Government) Data",
      "author": [],
      "contents": "\n\nContents\nZiele\nErste Schritte\nPackages\nData\nÜbungen\nÜbung 1\nÜbung 2\nÜbung 3\nÜbung 4 (Bonus)\n\n\nDas Portal opendata.swiss stellt der Allgemeinheit offene Behördendaten in einem zentralen Katalog zur Verfügung. Es wird betrieben vom Bundesamt für Statisik und ist ein gemeinsames Projekt von Bund, Kantonen, Gemeinden und weiteren Organisationen mit einem staatlichen Auftrag. In dieser Hausaufgabe nutzen wir den Datensatz “Corona Hilfen im Kulturbereich im Kanton Zürich” publiziert am 04. März 2021 von der Fachstelle Open Government Data des Kantons Zürich, und der Fachstele Kultur der Direktion der Justiz und des Innern.\nZiele\nDiese Hausaufgabe hat die folgenden Ziele:\neinen OGD Datensatz von opendata.swiss zu erkunden\nVisualisierungen zu rekonstruieren\nMehr Übung mit Git und GitHub zu bekommen\nErste Schritte\nÖffne deine Email Inbox und suche nach der Email mit dem Link für das GitHub Repo zu dieser Hausaufgabe (ha-02-hallo-ogd). Alternativ kannst du GitHub öffnen und in unserer GitHub Organisation nach dem Repo mit deinem Namen suchen.\nFolge den Schritten aus Hausaufgabe 1 oder den Folien der Woche 2 um das GitHub Repo in deine RStudio Cloud zu clonen.\nPackages\nIn dieser Hausaufgabe lernst du ein zwei R Packages kennen, welche wir in Woche 3 in mehr Detail behandeln werden. Das {readr} und das {dplyr} Package, welche beide zur Sammlung der {tidyverse} Packages gehören.\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(readr)\n\n\n\nData\nWir nutzen den Datensatz mit dem Titel “Corona Hilfen im Kulturbereich im Kanton Zürich” publiziert am 04. März 2021 von der Fachstelle Open Government Data des Kantons Zürich, Fachstele Kultur (Direktion der Justiz und des Innern).\n\n\n\nDie Beschreibung der Variablen ist auf der Ressource für den Datensatz zu finden:\nKategorie = Antragstellende Kategorie (‘Kulturschaffende’, ‘Kulturunternehmen gemeinnützig’ oder ‘Kulturunternehmen gewinnorientiert’)\nSparte = Kultursparte (‘Bereichsübergreifend’, ‘Bildende Kunst’, ‘Design’, ‘Film’, ‘Kino’, ‘Klubs und Konzertlokale’, ‘Literatur’, ‘Museen’, ‘Musik’ oder ‘Tanz/Theater’)\nNachgefragt = Nachgefragter Betrag in CHF (gerundet auf 100 CHF)\nBeschluss = Beschlossener Betrag in CHF (gerundet auf 100 CHF, ‘NA’ bei Ablehnung)\nStatus = Status des Antrags (‘Ablehnung’, ‘Ausbezahlt’ oder ‘Saldo offen’)\nEingangsdatum = Datum des Eingangs des Gesuchs; ‘Beschlussdatum’ = Datum des Beschlusses über das Gesuch\nID = anonymisierter Identifikator der antragstellenden natürlichen oder juristischen Person\nÜbungen\nÜbung 1\nErinnerst du dich, dass RStudio in vier Bereiche unterteilt ist? Versuche diese, ohne nachzuschauen, zu benennen.\nAufgaben\nFüge deine Antworten zu der R Markdown Datei für die Hausaufgabe hinzu\nStricke das Dokument und verifiziere, dass es keine Fehlermeldung gibt\n🧶 ✅ ⬆️ Knit, commit, und pushe deine Änderungen auf GitHub mit der Commit-Nachricht “Füge Antwort für Übung 1 hinzu.” Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\nÜbung 2\nVerifiziere, dass der Datensatz corona_kultur in deinem Environment (Fenster oben rechts) in RStudio zu finden ist. Wieviele Beobachtungen gibt es in diesem Datensatz?\nAufgaben\nIm RStudio Environment, klicke auf den Namen das Datensatzes corona_kultur\nFühre den Code View(corona_kultur) in der Console aus.\nNutze die Funktionen glimpse() und str() in einem R Code-chunk um die Daten zu erkunden\nFühre das Objekt corona_kultur in der Console aus? Kannst du die Anzahl Reihen und Spalten im Output finden?\nWelche zwei weiteren Funktionen kennst du um die Anzahl der Reihen und Spalten eines Datensatzes zu erfahren?\nIn der Spalte Beschluss taucht immer wieder der Wert ‘NA’ auf. Was bedeutet dies? Generell, und für diesen Datensatz?\n🧶 ✅ ⬆️ Knit, commit, und pushe deine Änderungen auf GitHub mit der Commit-Nachricht “Füge Antwort für Übung 2 hinzu.” Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\nÜbung 3\nSchauen wir uns zuerst die Verteilung der Beträge an, welche nachgefragt wurden. Wir sehen, dass eine grosse Anzahl an kleineren Beträgen (< 100’000 CHF) beantragt wurde, und das einige grosse Beträge (> 2’000’000 CHF) bentragt wurden. Ein Antrag mit über 10 Millionen CHF sticht ganz besonders heraus und führt dazu, dass dieser Plot nicht besonders schön ist.\nCode vorlesen: Nutze das Objekt corona_kultur und plotte ein Histogram mit der der Verteilung der nachgefragten Beträge auf der x-Achse. Zähle die Anzahl der Gesuche pro 100’000 CHF auf der y-Achse.\n\n\nggplot(data = corona_kultur, aes(x = Nachgefragt)) +\n  geom_histogram(binwidth = 100000)\n\n\n\n\nCode vorlesen: Beginne mit dem Objekt corona_kultur und leite es in die Funktion filter(), um nach Beobachtungen zu filtern, bei denen die Variable ‘Nachgefragt’ grösser 2’000’000 ist. Ordne den Datensatz dann in absteigender Reihenfolge nach der Variable ‘Nachgefragt’\n\n\ncorona_kultur %>% \n  filter(Nachgefragt > 2000000) %>% \n  arrange(desc(Nachgefragt)) \n\n\n# A tibble: 9 x 8\n  Kategorie      Sparte     Nachgefragt Beschluss Status Eingangsdatum\n  <chr>          <chr>            <dbl>     <dbl> <chr>  <date>       \n1 Kulturunterne… Kino          10749500   2531400 Ausbe… 2020-11-30   \n2 Kulturunterne… Musik          3156000         0 Ausbe… 2020-04-29   \n3 Kulturunterne… Tanz/Thea…     2730800   1517900 Ausbe… 2020-09-20   \n4 Kulturunterne… Musik          2722200   2091900 Ausbe… 2020-09-20   \n5 Kulturunterne… Musik          2519000         0 Ausbe… 2020-05-20   \n6 Kulturunterne… Klubs und…     2391000    272200 Ausbe… 2020-07-20   \n7 Kulturunterne… Tanz/Thea…     2368000   1566400 Ausbe… 2020-04-30   \n8 Kulturunterne… Klubs und…     2159400    578400 Ausbe… 2020-04-13   \n9 Kulturunterne… Bereichsü…     2049100        NA Ableh… 2020-09-15   \n# … with 2 more variables: Beschlussdatum <date>, ID <chr>\n\nIn den folgenden Aufgaben wollen wir uns nur mit Beobachtungen beschäftigen bei welchen die Variable ‘Beschluss’ kleiner 100’000 CHF ist. Dazu wird der Datensatz gefiltert und als ein neues Objekt in dem RStudio Environment gespeichert. Ich habe den Code für dich vorbereitet.\n\n\ncorona_kultur_beschluss_gering <- corona_kultur %>% \n  filter(Beschluss < 100000) \n\n\n\nAufgaben\nNutze die Daten im Objekt corona_kultur_beschluss_gering um mit der Funktion ggplot() einen Plot zu erstellen\nNutze die Variable ‘Beschluss’ für die x-Achse\nNutze das Geom für ein Histogram für die Darstellung des Plots (Tipp: geom_histogram)\nFühre den Code aus und betrachte den Plot\nOrdne die Variable ‘Sparte’ der der visuellen Eigenschaft für Farben zu (Tipp: Schaue in Praktikum 3 oder 4 nach wie du es dort gemacht hast)\nFühre den Code aus und betrachte den Plot\nNutze Faceting und lege die Variable ‘Kategorie’ auf die Spalten (Tipp: Schaue in Praktikum 4 nach wie du es dort gemacht hast)\nFühre den Code aus und betrachte den Plot\nInnerhalb der Klammern der Funktion geom_histogram(), füge das Argument ‘binwidth’ hinzu uns setze den Wert auf 10000 (Tipp: binwidth = 10000). Was bewirkt dieses Argument?\nFühre den Code aus und betrachte den Plot\nFüge einen Titel, einen Untertitiel und eine Bildunterschrift (caption) hinzu. (Tipp: Schaue in den Folien für Woche 2 nach)\n🧶 ✅ ⬆️ Knit, commit, und pushe deine Änderungen auf GitHub mit der Commit-Nachricht “Füge Antwort für Übung 3 hinzu.” Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\nGratulation! Du hast die Übungen abgeschlossen. Falls du noch Lust und Zeit hast, ist hier noch eine Bonusaufgabe.\nÜbung 4 (Bonus)\nNutze das Objekt corona_kultur und erstelle eine Säulendiagram (geom_bar)\nOrdne die Variable ‘Sparte’ der visuellen Eigenschaft für Farben zu\nOrdne der x-Achse eine kategoriale Variable ‘Status’ zu (anstatt einer numerischen Variable ‘Beschluss’)\nNutze Faceting und lege die Variable ‘Kategorie’ auf die Spalten\nFüge einen Titel, einen Untertitiel und eine Bildunterschrift (caption) hinzu.\nÄndere die Position der Legende auf den unteren Bereich des Plots (Tipp: Schau nach was wir in Übung 2 aus Praktikum 4 gemacht haben und ersetze ‘none’ durch ‘bottom’)\n🧶 ✅ ⬆️ Knit, commit, und pushe deine Änderungen auf GitHub mit der Commit-Nachricht “Füge Antwort für Übung 4 hinzu.” Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\n\n\n\n",
      "last_modified": "2021-08-24T15:12:48+02:00"
    },
    {
      "path": "ha-03-hallo-dplyr.html",
      "title": "Hausaufgabe 03 - Hallo dyplr",
      "author": [],
      "contents": "\n\nContents\nZiele\nErste Schritte\nPackages\nData\nÜbungen\nAufwärmen 1\nÜbung 1 - dplyr::filter()\nÜbung 2 - dplyr::arrange()\nÜbung 3 - dplyr::select()\n\n\nVisualisierung ist ein wichtiges Werkzeug um Daten zu erkunden. In den seltensten Fällen kommen Daten jedoch in genau der Form welche benötigt wird um hilfreiche Visualisierungen zu erstellen. Es werden oftmals neue Variablen erstellt, Zusammenfassungen erzeugt, oder möglicherweise werden Variablen umbenannt und umgeordnet, damit effizient damit gearbeitet werden kann. Das R Package {dplyr} aus der Sammlung der {tidyverse} Packages ist genau für diese Arbeit gemacht wurden, welche auch oft als Data Tansformation, Data Manipulation, oder auch Data Wrangling betitelt wird.\nZiele\nDiese Hausaufgabe hat die folgenden Ziele:\nErfahrungen mit den Hauptfunktionen des {dplyr} Package sammeln\nÜbungen aus dem Buch R for Data Science lösen\nBei Fragen unseren Slack Channel für den Kurs nutzen\nErste Schritte\nÖffne deine Email Inbox und suche nach der Email mit dem Link für das GitHub Repo zu dieser Hausaufgabe (ha-03-hallo-dplyr). Alternativ kannst du GitHub öffnen und in unserer GitHub Organisation nach dem Repo mit deinem Namen suchen.\nFolge den Schritten aus Hausaufgabe 1 oder den Folien der Woche 2 um das GitHub Repo in deine RStudio Cloud zu clonen.\nPackages\nIn dieser Hausaufgabe nutzen wir das {dplyr} Package und ein weiteres Daten Package names {nycflights13} um wesentliche Konzepte aus der letzten Lektionen zu üben. Das Package ist noch nicht installiert und ihr müsst dies in einem ersten Schritt selbst machen.\n❗ 1. In der R Konsole: Installiere das {nycflights13} R package mit der Funktion install.packages(\"\")\n\n\nlibrary(dplyr)\nlibrary(nycflights13)\n\n\n\nData\nWir nutzen den Dataframe flights aus dem {nycflights13} R Package. Die Rohdaten für diesen Datensatz stammen aus dem United States Department of Transportation - Bureau of Transportation Statistics und wurden für das Buch R for Data Science aufbereitet und als Daten Package bereitgestellt.\nDer Datensatz enthält alle 336.776 Flüge, die in 2013 von New York City abgegegangen sind. Der Datensatz beinhaltet 19 Variablen, welche im Detail der Hilfedatei beschrieben sind und mit ?flights aufgerufen werden können.\n\n\nglimpse(flights)\n\n\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 201…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, …\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2,…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, …\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EW…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FL…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, …\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 20…\n\nDas Daten Package beinhaltet noch vier weitere nützliche Datensätze:\nairlines: Beinhaltet den Namen der Fluggesellschaft für die Variable carrier aus dem flights Datensatz\nairports: Beinhaltet Metadaten zu den einzelnen Flughäfen in der Variable dest aus dem flights Datensatz\nplanes: Beinhaltet Metadaten zu den einzelnen Flugzeugen in der Variable tailnum aus dem flights Datensatz\nweather: Beinhaltet stündliche meterologische Daten für die Flughäfen LGA (La Guardia), JFK (John F Kennedy Intl) und EWR (Newark Liberty Intl).\nDu kannst mehr über die Datensätze in der Hilfedatei lernen oder diese mit der View() Funktion öffnen und erkunden.\n\n\nView(airlines)\nView(airports)\nView(planes)\nView(weather)\n\n\n\nÜbungen\nAufwärmen 1\nÖffne die R Markdown Datei für die Übung\nAktualisiere den YAML Header in dem du deinen Namen und das Datum hinzufügst\nPasse das Aussehen des Dokuments über die “Output Options” an (siehe Screenshots)\n🧶 ✅ ⬆️ Knit, commit und push deine Änderungen auf GitHub mit einer Commit-Nachricht deiner Wahl. Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\n\n\n\n\n\n\nÜbung 1 - dplyr::filter()\nLese das Kapitel 5.1 - Introduction aus dem Buch R for Data Science, mache dir Notizen und schreibe dir Fragen auf wenn du etwas nicht nachvollziehen kannst. Stelle deine Fragen in unserem Slack Channel für den Kurs.\nLese das Kapitel 5.2 - Filter rows with filter() aus dem Buch R for Data Science, mache dir Notizen und schreibe dir Fragen auf wenn du etwas nicht nachvollziehen kannst. Stelle deine Fragen in unserem Slack Channel für den Kurs.\nArbeite durch die Übungen aus Kapitel 5.2.4 - Exercises. Stelle Fragen in unserem Slack Channel für den Kurs.\n🧶 ✅ ⬆️ Knit, commit und push deine Änderungen auf GitHub mit einer Commit-Nachricht deiner Wahl. Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\nÜbung 2 - dplyr::arrange()\nLese das Kapitel 5.3 - Arrange rows with arrange() aus dem Buch R for Data Science, mache dir Notizen und schreibe dir Fragen auf wenn du etwas nicht nachvollziehen kannst. Stelle deine Fragen in unserem Slack Channel für den Kurs.\nArbeite durch die Übungen aus Kapitel 5.3.1 - Exercises. Stelle Fragen in unserem Slack Channel für den Kurs.\n🧶 ✅ ⬆️ Knit, commit und push deine Änderungen auf GitHub mit einer Commit-Nachricht deiner Wahl. Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\nÜbung 3 - dplyr::select()\nLese das Kapitel 5.4 - Select columns with select() aus dem Buch R for Data Science, mache dir Notizen und schreibe dir Fragen auf wenn du etwas nicht nachvollziehen kannst. Stelle deine Fragen in unserem Slack Channel für den Kurs. Es werden dir sogenannte “helper functions” vorgestellt, welche wir im Kurs noch nicht behandelt haben. Folgt dem Text und versucht zu verstehen was diese bewirken.\nArbeite durch die Übungen aus Kapitel 5.4.1 - Exercises. Stelle Fragen in unserem Slack Channel für den Kurs.\n🧶 ✅ ⬆️ Knit, commit und push deine Änderungen auf GitHub mit einer Commit-Nachricht deiner Wahl. Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\n\n\n\n",
      "last_modified": "2021-08-24T15:12:50+02:00"
    },
    {
      "path": "ha-04-mehr-dplyr.html",
      "title": "Hausaufgabe 04 - Lernende im Kanton Zürich",
      "author": [],
      "contents": "\n\nContents\nZiele\nErste Schritte\nPackages\nData\nÜbersicht über alle Lernenden im Kanton Zürich\n\nAufwärmen\nÜbungen - Lernende im Kanton Zürich\nÜbung 1 - Daten Importieren\nÜbung 2 - Daten beschreiben\nÜbung 3 - Daten visualisieren\nÜbung 4 - Daten eingrenzen\nÜbung 5 - Daten zusammenfassen\nÜbung 6 - Kurzanalyse\n\n\nIn dieser Hausaufgabe nutzen wir Daten aus der Bildungsstatistik des Kantons Zürich und werden diese mit uns bekannten Werkzeugen erkunden und visualisieren.\nZiele\nDiese Hausaufgabe hat die folgenden Ziele:\nErfahrungen mit den Hauptfunktionen des {dplyr} Package sammeln\nDie Elemente einer vorgegebenen `{ggplot2}´ Visualisierung zu identifizieren und diese zu rekunstrieren\nErste Schritte\nÖffne deine Email Inbox und suche nach der Email mit dem Link für das GitHub Repo zu dieser Hausaufgabe (ha-04-mehr-dplyr). Alternativ kannst du GitHub öffnen und in unserer GitHub Organisation nach dem Repo mit deinem Namen suchen.\nFolge den Schritten aus Hausaufgabe 1 oder den Folien der Woche 2 um das GitHub Repo in deine RStudio Cloud zu clonen.\nPackages\nIn dieser Hausaufgabe werden wir weiterhin hauptsächlich das R Package {dplyr} aus der Sammlung der {tidyverse} Packages nutzen. Zusätzlich nutzen wir vereinzelt Funktionen aus R Packages, welche du noch nicht kennegelernt hast.\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(tidyr)  # Neu in dieser Hausaufgabe\n\n\n\nData\nÜbersicht über alle Lernenden im Kanton Zürich\nEin Datensatz publiziert von der Bildungsstatitik Kanton Zürich. Der Datensatz ist öffentlich auf opendata.swiss verfügbar und wird auch auf einer Seite der Bildungsstatistik selbst mit Visualisierungen dargestellt.\nAufwärmen\nÖffne die R Markdown Datei für die Übung\nStricke die Datei zu einer HTML Datei\nAktualisiere den YAML Header in dem du deinen Namen und das Datum hinzufügst\nPasse das Aussehen des Dokuments über die “Output Options” an\nStricke das Dokument erneut\n🧶 ✅ ⬆️ Knit, commit und push deine Änderungen auf GitHub mit einer Commit-Nachricht deiner Wahl. Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\nÜbungen - Lernende im Kanton Zürich\nÜbung 1 - Daten Importieren\nIch habe die Daten für dich bereits importiert, auf das Jahr 2019 eingeschränkt und die NAs entfernt. Wir werden in allen folgenden Übungen, bis auf Übung 6 dem Objekt lernende2019 arbeiten.\n\n\n# Der Link zu den Daten wird hier als Objekt gespeichert \n# und taucht oben rechts in deinem  \"Environment\" auf\nlink <- \"https://www.web.statistik.zh.ch/ogd/data/bista/ZH_Uebersicht_alle_Lernende.csv\"\n\n# Hier wird nun das Objekt \"link\" genutzt um die CSV zu lesen\nlernende <- read_csv(file = link, \n                     locale = locale(encoding = \"ISO-8859-1\"))\n\n\n\n\n\n# Ich habe die Daten hier auf das Jahr 2019 gefilterert und NAs entfernt\nlernende2019 <- lernende %>% \n   filter(Jahr == 2019) %>% \n   drop_na() # Die letzte Zeile 1960 weisst eine Zeile mit NAs auf\n\n\n\nÜbung 2 - Daten beschreiben\nIn dieser Übung geht es darum die Daten zu erkunden und zu beschreiben. Dazu schauen wir uns auch nochmals die Variablen Typen innerhalb des Dataframes lernende2019 an.\nVariablen können ganz allgemein in numerische und nicht-numerische unterteilt werden. Innerhalb der numerischen Variablen, wird zwischen diskreten und kontinuierlichen Variablen unterschieden.\nDiskrete Variablen sind numerische Variablen, die zwischen zwei beliebigen Werten eine zählbare Anzahl von nicht negativen Werten aufweisen. Eine diskrete Variable ist immer numerisch. Beispiele: Die Anzahl Schüler in der Primarschule oder das Ergebnis eines Wurfs eines Würfels.\nStetige (kontinuierliche) Variablen sind numerische Variablen, die zwischen zwei beliebigen Werten eine unendliche Anzahl von Werten aufweisen. Stetige Variablen können aus numerischen oder Datums-/Uhrzeitwerten bestehen. Beispiel: die Länge eines Teils oder Datum und Uhrzeit eines Zahlungseingangs\nNicht-numerische Variablen werden auch als kategoriale Variablen bezeichnet.\nKategoriale Variablen umfassen eine endliche Anzahl von Kategorien oder eindeutigen Gruppen. Kategoriale Daten müssen nicht zwangsläufig eine logische Reihenfolge aufweisen (z.B. Materialtyp, Zahlungsmethode, Automarke). Wenn die Daten eine logische Reihenfolge aufweisen, dann werden sie auch als ordinal bezeichnet (z.B. Wochentage, Schulnoten).\n\n\n\nDie Fragen für diese Übungen sind in der Vorlage für die Hausaufgabe hinterlegt.\nÜbung 3 - Daten visualisieren\nIch habe hier einen Plot mit dem Dataframe lernende2019 vorbereitet. In dieser Übung geht es darum, dass du die einzelnen Elemente des Plots (x-Achse, y-Achse, etc.) studierst und versuchst den Plot selnst zu rekonstruieren.\nTipp: Nutze geom_col() und nicht geom_bar()\n\n\n\nÜbung 4 - Daten eingrenzen\nDie Übung ist in der Vorlage für die Hausaufgabe beschrieben.\nÜbung 5 - Daten zusammenfassen\nIn den folgenden zwei Code-chunks findest du jeweils eine Code Sequenz, welche eine Häufigkeitstabelle mit den Spalten Schultyp und n erstellt.\n\n\n# Häufigkeitstabelle 1 - Zusammenfassen mit count()\nlernende2019 %>% \n   count(Schultyp)\n\n\n\n\n\n# Häufigkeitstabelle 2 - Zusammfassen mit group_by %>% summarise()\nlernende2019 %>% \n   group_by(Schultyp) %>% \n   summarise(\n      n = n()\n   )\n\n\n\nVersuche den Code so anzupassen dass du folgendes Ergebnis erreichst:\n\n# A tibble: 6 x 2\n  Schultyp                    n\n  <chr>                   <dbl>\n1 Berufsfachschule        45508\n2 BrÃ¼ckenangebot          2073\n3 HÃ¶here Berufsbildung   19757\n4 Heim- und Sonderschule   3021\n5 Mittelschule            20591\n6 Volksschule            161073\n\nÜbung 6 - Kurzanalyse\nDer Code für diese Aufgabe ist vorbereitet. Es geht hier darum die Lücken auszufüllen. Jede Lücke hat einen Platzhalter mit drei Unterstrichen ___, unabhänig davon wie viele Zeichen ersetzt werden sollen. Die Beschreibung der einzelnen Schritte ist in der Vorlage für die Hausaufgabe.\n\nlernende ___  \n   drop____ %>% \n   group_by(___) %>% \n   summarise(\n      Total = ___(___)\n   ) %>% \n   mutate(\n      Differenz = Total - ___(Total)\n   ) %>% \n   mutate(\n      Veraenderung = case_when(\n         Differenz > ___ ~ \"Zunahme\",\n         Differenz < ___ ~ \"Abnahme\"\n      )\n   )\n\n🧶 ✅ ⬆️ Knit, commit und push deine Änderungen auf GitHub mit einer Commit-Nachricht deiner Wahl. Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\n\n\n\n",
      "last_modified": "2021-08-24T15:12:51+02:00"
    },
    {
      "path": "ha-05-erstes-projekt.html",
      "title": "Hausaufgabe 05 - Erstes Projekt",
      "author": [],
      "contents": "\n\nContents\nZiele\nErste Schritte\nÜbungen\nÜbung 1 - Erstelle ein eigenes Git Repository\nÜbung 2 - Klone ein öffentliches Git Repository\nÜbung 3 - Fork ein öffentliches Git Repository\n\nGrosses “Danke Schön” und Gratulation!\n\n\n\n\nZiele\nDiese Hausaufgabe hat die folgende Ziele:\nEin Git Repository auf GitHub selbst erstellen\nEin selbst erstelltes Git Repository aus GitHub in die eigene Arbeitsumgebung klonen\nEin öffentliches Git Repository aus GitHub in die eigene Arbeitsumgebung klonen\nEine Fork von einem öffentlichem GitHub Repository zu erstellen\nDie Begriffe “add”, “commit,”push“, und”pull\" unterscheiden können\nErste Schritte\nHeute wirst du zum ersten Mal ein Projekt selbst erstellen. Dies bedeutet, ich habe keine Vorlage für dich vorbereitet welche aus GitHub in den Arbeitsbereich für die den Kurs gebracht wird. Die typischen ersten Schritte fallen deshalb hier weg und wir steigen direkt mit den Übungen ein.\nÜbungen\nÜbung 1 - Erstelle ein eigenes Git Repository\nIm folgenden sind alle nötigen Schritte mit Beschreibung und Screenshots dokumentiert. Solltest du an einem Schritt nicht weiterkommen, dann melde dich bitte umgehend auf Slack.\nÖffne die GitHub website: github.com\nKlicke auf das schwarze Dreieck neben deinem Benutzernamen und in dem Dropdown Menü, wähle die GitHub Organisation für deinen Kurs aus\n\n\n\nKlicke auf den grünen Button mit der Aufschrift “New” um ein neues Repository zu starten\n\n\n\nGib dem Respository den folgenden Namen und ersetze “GITHUB_BENUTZERNAME” mit deinem GitHub Benutzernamen:\nmein-erstes-repo-GITHUB_BENUTZERNAME\nBeachte: Namen für Repositories sollten kurz und ohne Leerzeichen sein. Der Name sollte für dich bedeutend sein und gegebenenfalls den Namen des Projektes an welchem du arbeitest widerspiegeln.\n(optional): Gib dem Repository eine Beschreibung im Feld “Description”\n\n\n\nWähle die Option “Public” aus. Dein Repository ist damit öffentlich sichtbar.\nSetze das Häkchen neben “Add .gitignore” und klicke auf das Feld “.gitignore template: None”\nSchreibe im Feld “Filter ignores” den Buchstaben “R”\nKlicke auf das blau hinterlegte Feld mit dem Buchstaben “R”\nBeachte: Die Datei .gitignore definiert welche Dateien und/oder Ordner innerhalb eines Projektes nicht mit Git “verfolgt” werden sollen (ignoriert werden). Dies bedeutet, diese Dateien und/oder Ordner tauchen nicht auf GitHub auf. Sie sind nur lokal auf deinem Arbeitsgerät zu finden. Oft sind dies Konfigurationsdateien mit sensitiven Informationen oder Dateien die Nebenprodukte von der Arbeit mit R sind. Aber, dies können auch sensitive Daten innerhalb eines Projektes sein, welche nicht auf GitHub geteilt werden sollen, wobei jedoch der Code geteilt werden soll.\n\n\n\nSetze kein Häkchen bei “Add a README file” und “Choose a license” und klicke auf “Create repository”\n\n\n\nBewundere dein neues Repo und sei nicht eingeschüchtert von dem schwer nach zu vollziehbaren Text.\nKlicke auf das Klemmbrett-Symbol um den Link zu deinem neuen Respository in die Zwischenablage zu kopieren\n\n\n\nÖffne die Website rstudio.cloud und logge dich wie gewöhnlich mit deinen GitHub Zugangsadaten ein\nAchtung: Falls du dies noch nicht eingerichtet hast, siehe Hausaufgabe 01 - Verbindung zu GitHub und RStudio Cloud aufbauen.\n\n\n\nÖffne den Arbeitsbereich für deinen Kurs\n\n\n\nKlicke auf den Pfeil nach unten auf dem Button “New Project”\nKlicke auf “New Project from Git Repository”\n\n\n\nFüge den Link, welchen du von GitHub in deine Zwischenablage kopiert hast, hier in das Fenster “URL of your Git Repository” ein.\nLasse das Häkchen unter “Packages” gesetzt und klicke auf “OK”\n\n\n\nBewundere dein aus GitHub selbst erstelltes Projekt.\nIm Fenster unten rechts öffne den Reiter “Files” und klicke auf die Datei .gitignore um diese oben rechts im Code Editor zu öffnen.\nScroll durch die Datei und beachte, dass auf Zeile 2 die Datei .Rhistory ignoriert wird.\nSchliesse die .gitignore Datei wieder in dem du auf das kleine “x” neben dem Dateinamen oben rechts im Code Editor klickst\n\n\n\nÖffne den “Git” Reiter im Fenster oben rechts\nBeachte: Hier ist die Datei “project.Rproj” aufgetaucht. Die zwei gelben Fragezeichen unter “Status” bedeuten, dass diese Datei noch nicht von Git “verfolgt” wird. Die Datei wurde neu erstellt als du in RStudio Cloud auf “New Project” geklickt hast. Die Datei .gitignore taucht hier nicht auf. Git “verfolgt” diese Datei bereits, da wir sie beim Erstellen des Repositories auf GitHub hinzugefügt haben. Auch die Datei .Rhistory taucht nicht auf, da wir in der .gitignore Datei definiert haben diese nicht zu “verfolgen”.\n\n\n\nSetze nun den Haken unter “Staged” und klicke auf den “Commit” Button woraufhin sich ein neues Fenster öffnet.\n\n\n\nBeachte: Der Status ändert sich zu einem grünen A welches für “add” steht. Du hast Git nun signalisiert, dass diese Datei zu dem Git Repository hinzugefügt werden soll. Der Haken unter staged, bedeutet, dass diese Datei im nächsten Commit enthalten sein soll.\n\n\n\nIm Feld “Commit message”, schreibe: “R Project gestartet”\nKlicke auf den “Commit” Button unter dem Feld, welches die Commit Nachricht enthält. Ein neues Fenster öffnet sich.\n\n\n\nSchliesse das neue Fenster indem du auf den “Close” Button klickst. Schliesse auch den Browser Tab, welches sich geöffnet hatte um die Commit Nachricht zu schreiben.\n\n\n\nZurück im Browser Tab mit dem geöffneten RStudio Projekt, öffne erneut die Datei .gitignore. Scroll ganz an das Ende der Datei auf die Zeile 40 und füge eine neue Zeile ein indem du auf die Enter Taste auf deiner Tastatur drückst. Füge Text mit einem # hinzu und schreibe “# Ignoriere folgende Dateien”. Auf einer neuen Zeile, schreibe *.csv. Speicher die Datei in dem du das Tastaturkürzel “Ctrl + S (Windows)” nutzt oder auf: File -> Save in RStudio klickst\n\n\n\nBeachte: Du sagst Git hier, dass alle Dateien in deinem Projekt mit der Endung .csv ignoriert werden sollen.\nÖffne den Git Reiter im Fenster oben rechts, setzte den Haken bei staged um die Veränderungen im nächsten Commit hinzuzfügen, und klicke auf den Commit Button.\n\n\n\nBeachte: Hier ist die Datei “.gitignore” aufgetaucht. Falls nicht, dann klicke auf den “Aktualisieren Button” ganz rechts neben “main”. Das blaue M steht für “modified” (de: verändert). Git verfolgt diese Datei bereits und hat hier gemerkt, dass Veränderung an der Datei gemacht wurden. Der Status ändert sich nicht, aber das blaue M bewegt sich etwas nach links. Die Dateu ist erneut “staged” und Git wird damit signalisiert, dass diese im nächsten Commit enthalten sein soll.\nSchaue nun in das untere Fenster, welches in dem grünen Bereich die Veränderungen anzeigt, welche du an der .gitignore Datei gemacht hast.\n\n\n\nIm Feld “Commit message”, schreibe: “Ignoriere CSV Dateien”\nKlicke auf den “Commit” Button unter dem Feld, welches die Commit Nachricht enthält. Ein neues Fenster öffnet sich. Schliesse das neue Fenster indem du auf den “Close” Button klickst. Mache keinen push.\n\n\n\nErstelle eine neue Markdown Datei (Achtung: Nicht R Markdown): File -> New File -> Markdown File, und speicher die Datei mit dem Tastaturkürzel “Ctrl + S” (Windows) oder: File -> Save. Ein neues Fenster öffnet sich.\n\n\n\nIm Feld “File name:”, schreibe “README”\nKlicke auf den Save Button\n\n\n\nBeachte: Im Fenster oben rechts unter dem Git Reiter ist nun die Datei “README.md” nun mit zwei gelben Fragezeichen hinter “Status” aufgetaucht. Du hast bereits gelernt, was dies bedeutet. Kannst du dich erinnern?\nGehe erneut durch die Schritte Add, Commit, und wähle “README hinzugefügt” als Commit message. Mache jedoch mache weiterhin keinen push.\n\n\n\nZurück im Browser Tab mit dem geöffneten RStudio Projekt, schreibe nun einen Text deiner Wahl in deine README Datei. Anschliessend, klicke auf den “Preview” Button um dir eine Vorschau deiner README Datei anzusehen.\n\n\n\nÖffne den “Git” Reiter im Fenster oben rechts. Setze den Haken nur neben der README.md Datei und mache einen Commit mit einer Commit Nachricht deiner Wahl. Mache jedoch mache weiterhin keinen push.\n\n\n\nBeachte: Die README.md Datei wird mit einem blauen M als “modified” angezeigt. Git “verfolgt” diese bereits und hat gemerkt, dass du Veränderungen gemacht hast. Neu taucht hier die README.html Datei auf. Diese ist enstanden nachdem du auf den Preview Button geklickt hast.\nZurück im Browser Tab mit dem geöffneten RStudio Projekt, öffne die .gitignore Datei. Auf einer neuen Zeile, schreibe README.html. Speicher die .gitingore Datei\n\n\n\nIm Git Fenster oben rechts, klicke auf den Aktualisieren Button. Die README.html ist hier nun verschwunden und die .gitignore Datei taucht hier wieder auf. Warum? Setze den Haken neben .gitignore und mache einen Commit mit der Commit Nachricht “Ignoriere README.html”. Mache jedoch mache weiterhin keinen push.\n\n\n\nKlicke nun auf den “Push” Button (grüner Pfeil der nach oben zeigt) um deine Veränderung auf GitHub zu pushen.\nBeachte: Im Git Fenster oben rechts siehst du nun eine Zeile mit dem Text Your branch is ahead of 'origin/main' by 5 commits. Dies bedeutet: Git hat bei dir lokal in deinem Projekt fünf Commits registriert, welche noch nicht auf GitHub sind.\n\n\n\nGehe zurück zu deinem Repo auf github.com, aktualisiere die Seite, und schau dich etwas um. Versuche auf die Dinge zu klicken die du wieder erkennen kannst. Unten ein paar Beispiele zum darauf klicken.\n\n\n\nKlicke auf den “Settings” Button um die Einstellungen für das Repository zu öffnen\n\n\n\nKlicke auf “Manage access” links in der Auswahlleiste\nKlicke auf den Button “Invite teams or people”\n\n\n\nIm sich öffnenden Fenster schreibe: “larnsce”\nKlicke auf den blau hinterlegten Bereich\nIm sich öffnenden Fenster, setzte den blauen Kreis auf “Admin” und klicke auf “Add larnsce to this repository”\n\n\n\nBeachte: Das Repository ist “public” und damit öffentlich sichbar. Jede Person kann dieses Repository “clonen” und damit in RStudio weiterarbeiten. So wie du es am Anfang gemacht hast um es in die RStudio Cloud zu bringen. Aber: Nicht jede Person kann auch wieder zurück auf diese Repository “pushen” und damit Veränderung an deiner Version machen. Du hast mich gerade als Admin hinzugefüght, damit ich jegliche Zugangsrechte habe. Wenn du gemeinsam mit Personen aktiv an einem Repository arbeitest, empfiehlt es sich diesen mindestens die Rolle mit “Write” Zugang zu geben. Dies ermöglicht es wieder auf das Repo zu “pushen”.\nÜbung 2 - Klone ein öffentliches Git Repository\nLetzte Woche haben wir im Kurs eine Demonstrationseinheit zu Vektoren gemacht (Demonstration 2). Für diese Einheit hatte ich keine Vorlage für dich bereitgestellt und dich darum gebeten nicht selbst aktiv mitzuschreiben. Die Demonstration 2 ist als öffentliches Git Repository auf GitHub publiziert. Dies bedeutet, dass du dir sämtlichen Code aus den Übungen selbst in deine Arbeitsumgebung klonen kannst.\nÖffne das Repository auf GitHub: https://github.com/rstatsZH/demo-02-vektoren und nutze die dir bekannten Schritte um dieses Repository (rstatsZH/demo-02-vektoren) in die Arbeitsumgebung für den Kurs (RStudio Cloud Workspace rstatsZH-K00X) zu klonen.\n\n\n\nÖffne die R Markdown Datei “demo-02-solutions.Rmd”\nStricke die R Markdown Datei “demo-02-solutions.Rmd”\nÖffne das Git Fentser oben rechts, und:\nadd “demo-02-solutions.html”\ncommit “demo-02-solutions.html”\n\nPush deine Veränderungen auf zurück auf GitHub. Was sagt die Fehlermeldung? Was könnte dies bedeuten und wie könnte dies behoben werden?\nÜbung 3 - Fork ein öffentliches Git Repository\nIn Übung 1 hast du gelernt wie man jemanden als Collaborator zu einem Git Repository auf GitHub hinzufügt. In Übung 2 hast du gesehen, was passiert wenn du ein öffentliches GitHub Respository klonst aber selbst kein Collaborator bist. Diese Übung soll dir nun zeigen, wie du mit einem öffentlichen Repository selsbtständig weiterarbeiten kannst und deine Veränderung zurück auf GitHub pushen kannst.\nÖffne das Repository auf GitHub: https://github.com/rstatsZH/demo-02-vektoren und klicke auf den “Fork” Button. Ein neues Fenster öffnet sich.\n\n\n\nKlicke auf deinen Benutzernamen.\n\n\n\nSchau dir den Namen des Repository genau an. Was könnte dies bedeuten?\n\n\n\nNutze die dir bekannten Schritte um dieses Repository (DEINNAME/demo-02-vektoren) in die Arbeitsumgebung für den Kurs (RStudio Cloud Workspace rstatsZH-K00X) zu klonen\nÖffne die die R Markdown Datei “demo-02-solutions.Rmd”\nStricke die R Markdown Datei “demo-02-solutions.Rmd”\nÖffne das Git Fentser oben rechts, und:\nadd “demo-02-solutions.html”\ncommit “demo-02-solutions.html”\n\nPush deine Veränderungen auf zurück auf GitHub.\nGrosses “Danke Schön” und Gratulation!\nDu hast soeben den Grundstein für ein Verständnis über kollaboratives Arbeiten mit Git und GitHub gelegt. Danke, dass du die mehr als 50 Schritte durchgegangen bist! Es ist weiterhin völlig normal wenn sich das was dort im Hintergund passiert fremd und ungeheuerlich anfühlt. Erst wenn diese Schritte dutzende Male durchgeführt wurden und effektiv mit Anderen an Projekten gearbeitet wird, bildet sich ein Verständnis für die Prozesse die dort im Hintergrund laufen.\n\n\n\n",
      "last_modified": "2021-08-24T15:12:53+02:00"
    },
    {
      "path": "ha-06-projektarbeit.html",
      "title": "Hausaufgabe 06 - Projektarbeit",
      "author": [],
      "contents": "\n\nContents\nZiele\nErste Schritte\nÜbungen - Teil 1 - Projektarbeit\nInstallation von R, RStudio und Git\nDaten für das Projekt\nGitHub Repository erstellen\n\nÜbungen - Teil 2 - Treibhausgase\nÜbung 1 - Daten importieren\nÜbung 2 - Daten transformieren und visualisieren\n1. Pivoting\n2. Daten zusammenfassen und neue Variable erstellen\n3. Daten visualisieren 1\n4. Daten visualisieren 2 (Bonus)\n\n\n\n\n\n\nZiele\nDiese Hausaufgabe hat die folgende Ziele:\nEin RStudio Project mittels eines selbst erstellten GitHub Repositories auf dem eigenen Arbeitsgerät starten\nDaten für eine Projektarbeit identifizieren\nMehr Erfahrungen mit dem Tranformieren und Visualisieren von Daten sammeln\nSQL Befehle in Code-chunks innerhalb einer R Markdown Datei ausführen\nErste Schritte\nDiese Hausaufgabe besteht aus zwei Teilen:\nProjektarbeit (Pflicht)\nDaten über Treibhausgase in der Stadt Zürich (Zum Teil Bonusmaterial)\nÖffne deine Email Inbox und suche nach der Email mit dem Link für das GitHub Repo zu dieser Hausaufgabe (ha-06-projekarbeit).\nÜbungen - Teil 1 - Projektarbeit\nIm Anschluss an die sieben Kurseinheiten bekommt ihr die Gelegenheit als Teil eines kleinen Abschlussprojektes Unterstützung zu erhalten.\nDafür braucht es ein paar Vorraussetzungen:\nR, RStudio und Git sind auf euren Arbeitsgeräten installiert\nDaten für die Projektarbeit sind ausgewählt\nEin öffentliches (public) GitHub Repository wurde erstellt oder ein geschlossenes (private) GitHub Repository wurde erstellt zu welchem der GitHub Benutzer larnsce als Collaborator hinzugefügt wurde.\nBeachte: Auch Projekte mit sensitiven und schützenswerten Daten können öffentlich publiziert werden. Dazu werden Ordner und/oder Dateien mit den zu schützenden Daten in der .gitignore Datei hinzugefügt. Somit wird erreicht, dass die Daten nicht zugänglich sind, jedoch der Code für die Arbeit mit den Daten, was deutlich zu einer transparenten Arbeitsweise beiträgt auch wenn die Ergebnisse nicht reproduzierbar sind. Dabei wird empfohlen sich innerhalb der Verwaltungseinheit mit den zuständigen Mitarbeiter_innen für Datenschutz in Verbindung zu setzen.\nDas GitHub Repository auf das eigene Arbeitsgerät klonen und daraus ein RStudio Project machen\nDiese Übung soll sicherstellen, dass all diese Vorraussetzungen erfüllt sind.\nInstallation von R, RStudio und Git\nFalls die Software noch nicht vorhanden ist, wende dich an die IT Unterstützung um die nötige Software installiert zu bekommen. Du kannst in der Zwischenzeit bis zu dem Punkt fortfahren an dem ich dich bitte RStudio auf deinem Arbeitsgerät zu öffnen.\nListe mit Software für IT: https://github.com/rstatsZH/kochbuch/tree/main/01-Installation\nDaten für das Projekt\nIdeale Daten für das Projekt gibt es nicht, jedoch ist es sinnvoll nicht unbedingt Daten auszuwählen welche streng vertraulich sind, oder Daten welche Teil eines sehr grossen Projektes sind. Bereits öffentlich verfügbare Daten sind wertvoll wenn es euch wichtig ist das Projekt öffentlich und reproduzierbar zu publizieren. Das wichtigste Kritierium an die Daten ist jedoch, dass ihr Interesse daran habt den Datensatz zu erkunden und Fragen zu stellen und zu beantworten.\nEinen Datensatz, oder mehrere Datensätze, für das Projekt identifizieren.\nGitHub Repository erstellen\nWie das geht hast du in Übung 1 der Hausaufgabe aus Woche 5 gelernt. Falls du Schwierigkeiten hast meiner Anleitung zu folgen, melde dich umgehend und ich kann dich unterstützen.\nAbweichend von der Anleitung ist Folgendes:\n1 und 2. Schritt: Diese Schritte kannst du überspringen und das neue Repository unter deinem Benutzernamen erstellen. Beginne also mit dem 3. Schritt und erstelle ein neues Repository in deinem persönlichen Benutzer Account.\nSchritt: Überlege dir hier einen eigenen, sinnvollen Namen für das Repository\n\nSchritt: Entscheide hier selbst darüber ob du das Repository öffentlich (public) oder geschlossen (private) zugänglich machen möchtest.\n\nAuch wird dieses Mal kein Project in der RStudio Cloud erstellt, sondern auf deinem eigenen Arbeitsgerät. Überspringe deshalb die Schritte 12 bis 17 und ersetze diese durch Folgendes:\nÖffne RStudio auf deinem Arbeitsgerät\nKlicke auf File > New Project. Ein neues Fenster öffnet sich.\n\n\n\nKlicke auf “Version Control”, dann klicke auf “Git”\n\n\n\nFüge die URL aus deiner Zwischenablage im Feld “Repository URL” ein. Im Feld “Project directory name:” wird der Name des Repositories übernommen.\nWähle über den Button “Browse…” den Ordner auf deinem Arbeitsgerät aus, in dem du das Repository speichern möchtest (Tipp: Ich empfehle einen Ordner names “gitrepos” zu erstellen, welcher sich so nah wie möglich am Stammpfad des Laufwerks (Lokaler Datenträger) auf deinem Arbeitsgerät befindet. Im Windows Betriebssystem ist dies üblicherweise “C:”. As bietet sich an, an dem Ort ‘C:’ nur Ordner anzulegen, welche auch ein Git Repository sind. Dies erlaubt eine saubere Trennung zwischen allgemeinen Ordnern auf deinem Arbeitsgerät und solchen die ein Git Repository sind.\n\n\n\nKlicke auf “Create Project”, was für dich die folgenden drei Dinge erstellt\nein Ordner auf deinem Arbeitsgerät\nein lokales Git Repository welches mit einem remote GitHub Repository verbunden ist\nein RStudio Project\n\nBetrachte dein offenes RStudio Project\nFolge nun noch den Schritten 38 bis 43 aus der Hausaufgabe 5.\nAls nächstes könntest du mittels eines Dateimanagers (z.B. Windows File Explorer) deine Daten für das Projekt in dieses Repository kopieren. Es empfiehlt sich dazu innerhalb des Repositories einen Ordner namens “data” zu erstellen und die Daten dort abzulegen.\n\n\n\nWie du nun weiter machst ist dir überlassen. Möchtest du nicht, dass die Daten welche lokal gespeichert sind auf GitHub auftauchen? Dann füge den Pfad an dem diese liegen zu deiner .gitignore Datei hinzu (siehe Screenshot und ersetze den Namen data ggf. durch den Namen den du für diesen Ordner gewählt hast.\n\n\n\nAuch ist es nützlich eine README.md Datei zu erstellen und diese im Stammpfad des Repositories zu speichern. In der README kannst du dein Projekt beschreiben oder wichtige Vorraussetzungen für die Nutzung und Wiederverwendbarkeit deklarieren (Lizenzen).\nSobald du zufrieden bist mit dem Aufbau deines Projektordners kannst du deine Veränderung mittels den dir bekannten Schritten und unter dem Git Reiter oben rechts in RStudio zurück auf GitHub pushen.\nÜbungen - Teil 2 - Treibhausgase\nÜbung 1 - Daten importieren\nDie Aufgaben für diese Übung sind in der Vorlage hinterlegt.\nÜbung 2 - Daten transformieren und visualisieren\n1. Pivoting\nDie Daten sind derzeit in einem weiten Format. Das Ziel ist die Daten in ein langes Format zu bringen wobei nur die Spalte Jahr beibehalten wird und alle Spalten von Strom bis Heizoel_EL gedreht werden. Ich habe dir hier bereits etwas Code mit Lücken als Hilfestellung vorbereitet.\nErstelle ein neues Objekt in deiner Arbeitsumgebung (Environment), welches im langen Format ist in dem du die Lücken ausfüllst. Den Namen für das Objekt kannst du selbst auswählen.\nStrick das Dokument und dann: git add, commit, push alle Veränderung zurück auf GitHub\n\n___ <- ___ %>% \n  ____longer(\n    \n    # In diesem Argument werden die Spalten ausgewählt welche gedreht werden\n    ___ = !Jahr,            \n    \n    # In diesem Argument wird der Name für die neue Spalte definiert, welche\n    # die Namen aus den zuvor ausgewählten Spalten enthält\n    ___ = \"Energietraeger\", \n    \n    # In diesem Argument wird der Name für die neue Spalte definiert, welche\n    # die Werte aus den zuvor ausgewählten Spalten enhält\n    ___ = \"Emissionen\"\n  )\n\n2. Daten zusammenfassen und neue Variable erstellen\nDie Aufgaben für diese Übung sind in der Vorlage für die Hausaufgabe hinterlegt.\n3. Daten visualisieren 1\nStarte mit dem Objekt, welches du in Schritt 3 der vorheringen Übung erstellt hast\nErstelle ein Säulendiagram und lege das Jahr auf die x-Achse und die Differenz der Emissionen zwischen den Jahren auf die y-Achse\nBonus: Warum ist auf der x-Achse immer nur für alle zehn Jahre ein Tick mit Beschriftung?\nBonus: Wandle den Typen der Variable “Jahr” in eine Variable mit dem Typ Faktor um bevor du den Plot erstellst\nBonus: Passe das Layout des Plots beliebig an\n4. Daten visualisieren 2 (Bonus)\nNutze das Objekt welches du in “2.1 Pivoting” erstellt hast, und:\nNutze die Funktion group_by() um die Daten nach dem Jahr zu gruppieren\nNutze die Funktion filter() um in der Spalte Jahr nur das Jahr 1990 und das Jahr 2016 anzuzeigen\nWieviele Wege fallen dir ein um auf das Ergebnis zu kommen?\n\nSpeicher das Ergebnis als ein neues Objekt in deiner Arbeitsumgebung (Environment) mit einem Namen deiner Wahl\nReproduziere folgendes verbundenes Säulendiagramm\n\n\n\n\n\n\n",
      "last_modified": "2021-08-24T15:12:54+02:00"
    },
    {
      "path": "ha-99-sql-rmarkdown.html",
      "title": "Hausaufgabe Extra - SQL in R Markdown",
      "author": [],
      "contents": "\n\nContents\nZiele\nÜbungen - SQL Befehle in R\nÜbung 0 - Verbindung zu einer Datenbank herstellen\nÜbung 1 - Tabellen in einer Datenbank erkunden\nÜbung 2 - SQL Code-chunk einfügen\nÜbung 3 - SQL Code schreiben\nÜbung 4 - SQL Abruf als Objekt speichern\n\n\n\n\n\nZiele\nDiese Übungen wurden erstellt um das Arbeiten mit SQL Code in R Markdown zu lernen. Der Inhalt ist nur Bestandteil des Kurses falls bei den Teilnehmer_innen ein besonderes Interesse am Arbeiten mit SQL Datenbanken besteht. In diesem Fall sind die Übungen Teil der Hausaufgabe 6.\nÜbungen - SQL Befehle in R\nIn R Markdown Dokumenten kann Code aus verschiedenen Programmiersprachen ausgeführt werden. Dies wird mittels der Code-chunks gesteuert und es erlaubt Nutzer_innen die Effizienz von SQL Datenbanken mit den Stärken von R zu verbinden.\nÜbung 0 - Verbindung zu einer Datenbank herstellen\nIn dieser Übung nutzen wir die Verbindung zu einer Datenbank welche ich mittels des folgenden Codes erstellt habe. In der Praxis wird hier die Verbindung zu der Datenbank erstellt, welche von der Verwaltungseinheit gepflegt wird.\nDer Name des Objektes mit der Verbindung zur Datenbank ist hier con, es kann jedoch ein beliebiger Name gewählt werden.\n\n\nlibrary(DBI)\n\ncon <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\")\n\n\n\nÜbung 1 - Tabellen in einer Datenbank erkunden\nIch habe auch mittels des folgenden Codes den penguins Datensatz aus dem palmerpenguins Package in die Datenbank kopiert. Die Tabelle ist jetzt in unserer Datenbank hinterlegt.\nFühre den Code-chunk aus\n\n\n\nFühre den Befehl dbListTables(con) im folgenden R Code-chunk aus\nFühre den Befehl dbListFields(con, \"penguins) im folgenden R Code-chunk us\n\n\n\nÜbung 2 - SQL Code-chunk einfügen\nKlicke auf das kleine grüne C+ im oberen Bereich des Fensters. Ein Dropdown Menü öffnet sich.\nKlicke auf das SQL Symbol\nFüge das Objekt con hinter das “=” Zeichen im obersten Bereich des Code-chunk. Dies sollte folgendermassen aussehen: {sql connection=con}\nSchreibe nun SELECT * FROM penguins in den Code-chunk\nFühre den Code-chunk aus\n\n\n\nÜbung 3 - SQL Code schreiben\nFüge einen SQL Code-chunk hinzu mit einer Verbindung zum Objekt con\nSchreibe dir bekannten SQL Code um die durchschnittliche Schnabellänge (Variable: bill_length_mm) gruppiert nach den Variablen island und species zu berechnen\nFühre den Code-chunk aus\n\n\n\nÜbung 4 - SQL Abruf als Objekt speichern\nKopiere den Code-chunk aus der vorherigen Übung\nFüge nach “con” ein Komma ein und dann output.var=\"penguins_avg\" um den Output des Code-chunks als Objekt in einer Arbeitsumgeung (Environment) zu speichern. Dies sollte folgendermassen aussehen:\n{sql connection=con, output.var=\"penguins_avg\"}\nFühre den Code-chunk aus und überprüfe ob das Objekt in deiner Arbeitsumgebung (Environment) auftaucht\n\n\n\n\n\n\n",
      "last_modified": "2021-08-24T15:12:56+02:00"
    },
    {
      "path": "index.html",
      "title": "rstatsZH - Data Science mit R",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-08-24T15:12:56+02:00"
    }
  ],
  "collections": ["posts/posts.json"]
}
