{
  "articles": [
    {
      "path": "index.html",
      "title": "rstatsZH - Data Science mit R",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-02-17T11:44:39+01:00"
    },
    {
      "path": "prak-01-hallo-r.html",
      "title": "Praktikum 01 - Hallo R!",
      "author": [],
      "contents": "\n\nContents\nVerbindung zu GitHub und RStudio Cloud aufbauen\nErste Schritte\nAufwärmen\nYAML\nÄnderungen schreiben (commit)\nÄnderungen schieben (push)\n\nPakate (Packages)\nDaten\n\nÜbungen\n\nDas Hauptziel diese Praktikums ist es, dich mit R und RStudio bekannt zu machen. Ein zusätzliches Ziel ist es, dich in Git und GitHub einzuführen, das Kollaborations- und Versionskontrollsystem, das wir während des Kurses benutzen werden.\nIch ermutige dich im Laufe der Übungen über das hinauszugehen was die Übungen vorgeben. Die Bereitschaft zu experimentieren wird dich zu einer besseren Programmierin machen. Bevor wir soweit sind, ist es wichtig, dass du dir ein paar grundlegende Kenntnisse in R aneignest.\nHeute beginnen wir mit den grundlegenden Bausteinen von R und RStudio: die Benutzeroberfläche, das Einlesen von Daten und grundlegende Befehle.\nDieses erste Praktikum wird von dir allein durchgeführt. In zukünfitgen Praktika wirst du lernen, wie du auf GitHub in kleinen Teams zusammenarbeitest und einen Bericht für dein Team erstellst.\nVerbindung zu GitHub und RStudio Cloud aufbauen\nDu solltest eine Einladung erhalten haben, um der GitHub Organisation für diesen Kurs beizutreten. Diese Einladung musst du annehmen, bevor du mit dem nächsten Schritt fortfährst.\nÖffne deine Email welche du für deinen GitHub Konto hinterlegt hast\nKlicke auf “Join”\n\n\n\nUm deine RStudio und GitHub Konten zu verbinden, befolge die folgenden Schritte:\nÖffne rstudio.cloud und login mit deinem Benutzerkonto (nutze GitHub)\nKlicke auf deinen Namen in der oberen rechten Ecke, um das rechte Menü zu öffnen.\nKlicke dann auf Authentifizierung.\n\n\n\nAktiviere im Fenster Authentifizierung das Kontrollkästchen für Enabled.\n\n\n\nIm nächsten Fenster klickst du auf das grüne Kästchen mit der Aufschrift “Authorize rstudio”.\n\n\n\nZurück im Authentifizierungsfenster aktivierst du das Kästchen Private repo access also enabled\nIm Feld Organisation access, klickst du nun zunächst auf “Request” neben deinem Kursnamen und folgend auf “Request approval from owners”. Sollte hier kein Kurs auftauchen, könnte dies bedeueten, dass du die GitHub-Einladung zum Kurs noch nicht angenommen hast und du solltest zurückgehen und dies überprüfen und nacholen. Falls du keine Einladung hast, kontaktiere mich.\nNun noch auf das grüne Feld “Authorize rstudio” und nach Eingabe deines Passworts bist du bereit.\n\n\n\nSobald du fertig bist, sollten in RStudio Cloud beide Kästchen markiert sein.\n\n\n\nUm zu bestätigen, dass du deine GitHub- und RStudio-Cloud-Konten erfolgreich verknüpft hast, wähle GitHub settings > Applications. Du solltest RStudio als autorisierte App unter Authorized OAuth Apps aufgelistet sehen. Falls nicht, ist dies ein guter Zeitpunkt, um eine Frage zu stellen.\n\n\n\nErste Schritte\nJede deiner Aufgaben wird mit den folgenden Schritten beginnen. Du hast diese bereits einmal im Unterricht gesehen, hier sind sie noch einmal im Detail beschrieben.\nIn Zukunft wird jede Aufgabe mit einem Abschnitt “Erste Schritte” beginnen, aber mit etwas weniger Details. Du kannst jedoch jederzeit auf dieses Praktikum zurückgreifen, um eine detaillierte Liste der Schritte zu erhalten, die notwendig sind, um mit einer Aufgabe zu beginnen.\nKlicke auf den Link für die Aufgabe, den du in einer E-Mail erhalten haben solltest, um dein GitHub Repository (im Folgenden “Repo” genannt) für die Aufgabe zu erstellen. Dieses Repository enthält eine Vorlage, auf der du aufbauen kannst, um die Aufgabe zu lösen.\n\n\n\nAuf GitHub klickst du auf den grünen Clone or Download Button und wählst Use HTTPS wie im Bild unten (dies könnte bereits standardmäßig ausgewählt sein, und wenn es so ist, siehst du den Text Clone mit HTTPS). Klicke auf das Klemmbrett-Symbol, um die Repo-URL zu kopieren.\n\n\n\nÖffne nun RStudio Cloud und in den Kursarbeitsbereich. Klicke auf den Abwärtspfeil und erstelle ein New Project from Git Repo.\n\n\n\nFüge die URL aus deinem Repo oben in das Dialogfeld ein und stelle sicher, dass das Häkchen bei “Packages” gesetzt ist.\n\n\nknitr::include_graphics(\"img/arrow-base-project.png\")\n\n\n\n\nKlicke auf OK, habe etwas Geduld, und du bist bereit zum logslegen!\nAufwärmen\nBevor wir uns die Daten anschauen, machen wir noch ein paar Aufwärmübungen um die R Markdown vorzustellen.\nDer obere Teil deiner R Markdown Datei (zwischen den drei gestrichelten Linien) wird YAML genannt. Es steht für “YAML Ain’t Markup Language”. Es ist ein menschenfreundlicher Standard zur Serialisierung von Daten für alle Programmiersprachen. Alles, was du wissen musst, ist, dass dieser Bereich YAML genannt wird (wir werden ihn als solchen bezeichnen) und dass er Metainformationen über dein Dokument enthält.\nYAML\nÖffne die R Markdown (Rmd) Datei in deinem Projekt, ändere den Autorennamen zu deinen Namen, füge ein Datum hinzu und stricke (‘knit’) das Dokument.\n\n\n\nDer obere Teil deiner R Markdown Datei (zwischen den drei gestrichelten Linien) wird YAML genannt. Es steht für “YAML Ain’t Markup Language”. Es ist ein menschenfreundlicher Standard zur Serialisierung von Daten für alle Programmiersprachen. Alles, was du wissen musst, ist, dass dieser Bereich YAML genannt wird (wir werden ihn als solchen bezeichnen) und dass er Metainformationen über dein Dokument enthält.\nÄnderungen schreiben (commit)\nIn deinem RStudio, öffne das Fenster mit dem Titel Git im Ansichtsfenster oben rechts.\nWenn du Änderungen an deiner Rmd-Datei gemacht hast, solltest du nun hier den Dateinamen sehen. Wähle die Datei aus der Liste aus indem du sie anklickst. Dann klicke auf Diff über den Dateinamen.\nEin neues Fenster öffnet sich welche dir die Differenz zwischen dem letzten commit-Zustand des Dokuments (rot) und dem aktuellen aktuellen Zustand zeigt (grün), welcher deine Änderungen beinhaltet.\nWenn du mit diesen Änderungen zufrieden bist, klicke auf das Kontrollkästchen neben dem Dateinamen um einen Haken zu setzen und schreibe “Aktualisiere Autorenname und Datum” in das Feld Commit message. Klicke anschliessend auf Commit.\n\n\n\nDu musst nicht nach jeder Änderung committen, das würde ziemlich mühsam werden.\nDu solltest in Betracht ziehen, Zustände zu committen, die für dich bedeutsam sind, um sie zu überprüfen, zu vergleichen oder wiederherzustellen.\nIn den ersten paar Aufgaben werden wir dir genau sagen, wann du committen solltest und in einigen Fällen, welche commit-Nachricht du verwenden solltest. Im weiteren Verlauf des Kurses wirst du diese Entscheidungen dann selbst treffen.\nÄnderungen schieben (push)\nJetzt, wo du ein Update gemacht und diese Änderung committed hast, ist es an der Zeit, diese Änderungen ins Web zu pushen!\nOder genauer gesagt, in dein Repo auf GitHub. Warum das? Damit andere deine Änderungen sehen können. Und mit anderen meinen wir das Kursteam (deine Repos in diesem Kurs sind für dich und uns privat).\nUm deine Änderungen auf GitHub zu pushen, klicke auf Push. Daraufhin erscheint ein Dialogfenster, in dem du zuerst deinen Benutzernamen und dann dein Passwort eingeben musst. Das ist etwas umständlich und muss bei jedem push wiederholt werden. Aber, habe etwas Geduld, im Laufe des Kurse werde ich dir beibringen wie du dein Passwort speichern kannst, damit du es nicht jedes Mal neu eingeben musst.\n\n\nknitr::include_graphics(\"img/push-to-github.png\")\n\n\n\n\nPakate (Packages)\nIn diesem Praktikum werden wir mit zwei Paketen arbeiten: datasauRus, welches den Datensatz enthält, den wir verwenden werden und tidyverse, welches eine Sammlung von Paketen ist, um Datenanalysen auf eine “ordentliche (tidy)” Art und Weise durchzuführen. Diese Pakete sind bereits für dich installiert. Du kannst die Pakete laden, indem du den folgenden Codeblock in der Konsole ausführst.\n\n\nlibrary(tidyverse) \nlibrary(datasauRus)\n\n\n\nBeachte, dass die Pakete auch mit den gleichen Befehlen in deinem R Markdown Dokument geladen werden.\nDaten\nDer Dataframe, mit dem wir heute arbeiten werden, heißt datasaurus_dozen und befindet sich im Paket datasauRus. Eigentlich enthält dieser einzelne Dataframe 13 Datensätze, die uns zeigen sollen, warum Datenvisualisierung wichtig ist und wie zusammenfassende Statistiken allein irreführend sein können. Die verschiedenen Datensätze sind durch die Variable dataset gekennzeichnet.\nUm mehr über das Dataset herauszufinden, gib folgendes in deine Konsole ein: ?datasaurus_dozen. Ein Fragezeichen vor dem Namen eines Objekts ruft immer dessen Hilfedatei auf. Dieser Befehl muss in der Konsole ausgeführt werden.\nÜbungen\nBasierend auf der Hilfedatei, wie viele Zeilen und wie viele Spalten hat die Datei datasaurus_dozen? Was sind die Variablen, die im Dataframe enthalten sind? Füge deine Antworten zu deinem Praktikumsbericht hinzu.\nSchauen wir uns an, was diese Datensätze sind. Dazu können wir eine Häufigkeitstabelle (frequency table) der Datensatzvariablen erstellen:\n\n\ndatasaurus_dozen %>% \n  group_by(dataset) %>% \n  count() \n\n\n# A tibble: 13 x 2\n# Groups:   dataset [13]\n   dataset        n\n   <chr>      <int>\n 1 away         142\n 2 bullseye     142\n 3 circle       142\n 4 dino         142\n 5 dots         142\n 6 h_lines      142\n 7 high_lines   142\n 8 slant_down   142\n 9 slant_up     142\n10 star         142\n11 v_lines      142\n12 wide_lines   142\n13 x_shape      142\n\nDer ursprüngliche Datasaurus (dino) wurde von Alberto Cairo in diesem großartigen Blogpost erstellt. Das andere Dutzend wurde mit Hilfe von Simulated Annealing generiert und der Prozess wird in dem Paper Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics through Simulated Annealing1 von Justin Matejka und George Fitzmaurice beschrieben. In dem Paper simulieren die Autoren eine Vielzahl von Datensätzen, die die gleichen zusammenfassenden Statistiken wie der Datasaurus haben, aber sehr unterschiedliche Verteilungen aufweisen.\n🧶 ✅ ⬆️ Knit, commit und push deine Änderungen auf GitHub mit der Commit-Nachricht “Füge Antwort für Übung 1 hinzu.” Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\nPlot y gegen x für den dino Datensatz. Berechne dann den Korrelationskoeffizienten zwischen “x” und “y” für diesen Datensatz.\nUnten findest du den Code, den du brauchst, um diese Aufgabe zu lösen. Im Grunde ist die Antwort schon gegeben, aber du musst die relevanten Bits in dein Rmd-Dokument einfügen und es erfolgreich stricken (knit) und die Ergebnisse ansehen.\nBeginne mit dem datasaurus_dozen und leite es in die Funktion filter, um nach Beobachtungen zu filtern, bei denen dataset == \"dino\" ist. Speichere den resultierenden gefilterten Dataframe als einen Dataframe namens dino_data.\n\n\ndino_data <- datasaurus_dozen %>%\n  filter(dataset == \"dino\")\n\n\n\nHier geht eine ganze Menge vor sich, also lassen wir es langsam angehen und nehmen es Schritt für Schritt auseinander.\nErstens, der Pipe-Operator: %>%, nimmt das, was davor kommt und sendet es als erstes Argument an das, was danach kommt. Hier sagen wir also, dass wir den datasaurus_dozen Dataframe nach Beobachtungen filtern, bei denen dataset == \"dino\" ist.\nZweitens, der Zuweisungsoperator: <-, weist dem gefilterten Datenrahmen den Namen dino_data zu.\nAls nächstes wollen wir diese Daten visualisieren. Dafür verwenden wir die Funktion ggplot(). Das erste Argument sind die Daten, die wir visualisieren wollen. Als nächstes definieren wir die aesthetischen Mappings. In anderen Worten, die Spalten der Daten, die auf bestimmte ästhetische Merkmale des Plots abgebildet werden, z.B. wird die x-Achse die Variable namens x und die y-Achse die Variable namens y repräsentieren.\nDann fügen wir eine weitere Ebene zu diesem Diagramm hinzu, in der wir definieren, welche geometrischen Formen wir verwenden wollen, um jede Beobachtung in den Daten darzustellen. In diesem Fall wollen wir, dass es sich um Punkte handelt, daher geom_point().\n\n\nggplot(data = dino_data, mapping = aes(x = x, y = y)) +\n  geom_point()\n\n\n\n\nWenn das nach viel klingt, dann ist es das auch. Nächste Woche wirst du mehr über die Philosophie der Datenvisualisierung im Layer erfahren. Für den Moment kannst du dem Code folgen, welcher dir zur Verfügung gestellt wird.\nFür den zweiten Teil dieser Übungen müssen wir eine zusammenfassende Statistik berechnen: den Korrelationskoeffizienten. Der Korrelationskoeffizient, in der Statistik oft als \\(r\\) bezeichnet, misst den linearen Zusammenhang zwischen zwei Variablen.\nDu wirst sehen, dass einige der Variablenpaare, die wir darstellen, keinen linearen Zusammenhang zwischen ihnen haben. Das ist genau der Grund, warum wir zuerst visualisieren wollen: visualisieren, um die Form der Beziehung zu beurteilen, und \\(r\\) nur berechnen, wenn es relevant ist.\nIn diesem Fall macht die Berechnung eines Korrelationskoeffizienten wirklich keinen Sinn, da die Beziehung zwischen x und y definitiv nicht linear ist - sie ist dinosaurierhaft!\nAber zur Veranschaulichung lass uns den Korrelationskoeffizienten zwischen “x” und “y” berechnen.\nBeginne mit dino_data und berechne eine zusammenfassende Statistik, die wir r nennen werden, als die Beziehung (cor) zwischen x und y.\n\n\ndino_data %>%\n  summarize(r = cor(x, y))\n\n\n# A tibble: 1 x 1\n        r\n    <dbl>\n1 -0.0645\n\n🧶 ✅ ⬆️ Knit, commit, und pushe deine Änderungen auf GitHub mit der Commit-Nachricht “Füge Antwort für Übung 2 hinzu.” Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\nPlotte y gegen x für den star Datensatz. Du kannst (und solltest) den Code, den wir oben genutzt, wiederverwenden, ersetze einfach den Namen des Datensatzes durch den gewünschten Datensatz. Berechne dann den Korrelationskoeffizienten zwischen “x” und “y” für diesen Datensatz. Wie ist dieser Wert im Vergleich zu r von dino?\n🧶 ✅ ⬆️ Dies ist ein weiterer guter Ort, um zu pausieren, zu stricken (knit), Änderungen mit der Commit-Nachricht “Füge Antwort für Übung 3 hinzu.” zu committen und zu pushen. Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\nPlotte y gegen x für den circle Datensatz. Du kannst (und solltest) den Code, den wir oben genutzt, wiederverwenden, ersetze einfach den Namen des Datensatzes durch den gewünschten Datensatz. Berechne dann den Korrelationskoeffizienten zwischen “x” und “y” für diesen Datensatz. Wie ist dieser Wert im Vergleich zu r von dino?\n🧶 ✅ ⬆️ Du kannst erneut pausieren, die Änderungen mit der Commit-Nachricht “Füge Antwort für Übung 4 hinzu.” committen und pushen. Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist.\nZum Schluss wollen wir alle Datensätze auf einmal darstellen. Um dies zu tun, werden wir Method für eine Facettierung nutzen.\nMit einer Facette (facet) durich die Variable dataset, platzieren wir die Plots in einem Raster aus drei Spalten, entfernen die Legende und geben der Variable dataset eine visuelle Eigenschaft (aesthetic).\n\n\nggplot(datasaurus_dozen, aes(x = x, y = y, color = dataset))+\n  geom_point()+\n  facet_wrap(~ dataset, ncol = 3) +\n  theme(legend.position = \"none\")\n\n\n\nUnd wir können die Funktion group_by() in Kombination mit der Funktion summarize() verwenden, um alle zusammenfassenden Korrelationskoeffizienten zu erzeugen.\n\n\ndatasaurus_dozen %>%\n  group_by(dataset) %>%\n  summarize(r = cor(x, y)) \n\n\n\nGratulation! Du hast die Übungen abgeschlossen. Zwei Dinge noch:\n\n\n\n(1) Ändere die Grösse deiner Abbildungen\nKlicke auf das Zahnradsymbol oben im R Markdown Dokument und wähle “Output Options…” im Dropdown-Menü. In dem sich öffnenden Dialogfenster gehst du zum Reiter “Figures” und änderst die Höhe und Breite der Figuren und klickst auf “OK”, wenn du fertig bist. Dann stricke dein Dokument und schaue, wie dir die neuen Größen gefallen. Ändere und stricke wieder und wieder, bis du mit den Figurengrößen zufrieden bist. Schau dir den YAML-Header an und beachte, dass diese Werte dort gespeichert werden, was bedeutet dass du diese auch hier ändern kannst.\n\n\n\nDu kannst auch verschiedene Größen für unterschiedliche Abbildungen verwenden. Klicke dazu auf das Zahnradsymbol innerhalb des Chunks, in dem du eine Änderung vornehmen möchtest. Das Ändern der Abbildungsgrößen hat neue Optionen zu diesen Chunks hinzugefügt: fig.width und fig.height. Du kannst sie auch ändern, indem du verschiedene Werte direkt in deinem R Markdown Dokument definierst.\n\n\n\n(2) Ändere das Aussehen deines Berichts:\nKlicke erneut auf das Zahnradsymbol oben im R Markdown Dokument und wähle “Output Options…” im Dropdown-Menü. Probiere im Reiter “General” des sich öffnenden Dialogfeldes verschiedene Optionen für die Syntaxhervorhebung und das Design (theme) aus. Klicke auf OK und stricke dein Dokument. Du kannst mit diesen Optionen herumspielen, bis du mit dem Aussehen zufrieden bist.\nBravo, du bist fertig! Übertrage alle verbleibenden Änderungen, verwende die Commit-Nachricht \"Fertig mit Übung 1! \" und pushe. Achte darauf, alle geänderten Dateien zu committen und zu pushen, damit dein Git-Fenster danach aufgeräumt ist. Bevor du die Aufgabe beendest, stelle sicher, dass alle Dokumente in deinem GitHub Repository aktualisiert sind.\n\nMatejka, Justin, and George Fitzmaurice. “Same stats, different graphs: Generating datasets with varied appearance and identical statistics through simulated annealing.” Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems. ACM, 2017.↩︎\n",
      "last_modified": "2021-02-17T11:44:42+01:00"
    }
  ],
  "collections": ["posts/posts.json"]
}
