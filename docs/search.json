{
  "articles": [
    {
      "path": "code_of_conduct.html",
      "author": [],
      "contents": "\n\nContents\nVereinbarung\nüber Verhaltenskodex für Mitwirkende\nUnsere Verpflichtung\nUnsere Standards\nVerantwortlichkeiten\nbei der Durchsetzung\nGeltungsbereich\nUmsetzung\nDurchsetzungsrichtlinien\n1. Berichtigung\n2. Verwarnung\n3. Vorübergehender\nAusschluss\n4. Dauerhafter Ausschluss\n\nBezug\n\n\nVereinbarung\nüber Verhaltenskodex für Mitwirkende\nUnsere Verpflichtung\nWir als Mitglieder, Teilnehmende und Verantwortliche unserer\nGemeinschaft verpflichten uns bei der Teilnahme an dem Projekt und\nunserer Gemeinschaft zu einer belästigungsfreien Erfahrung für alle,\nunabhängig von Alter, Körpergröße, Behinderung, ethnischer Zuordnung,\ngeschlechtlicher Identität und Ausdruck, Grad der Erfahrung, Bildung,\nsozialem Status, Nationalität, persönlicher Erscheinung, Rasse, Religion\noder Geschlechtsidentität und sexueller Orientierung.\nWir verpflichten uns, in einer Weise zu handeln und zu interagieren,\ndie zu einer offenen, einladenden, vielfältigen, inklusiven und gesunden\nGemeinschaft beiträgt.\nUnsere Standards\nBeispiele für Verhaltensweisen, die zu einem positiven Umfeld für\nunsere Gemeinschaft beitragen, sind:\nEinfühlungsvermögen und Freundlichkeit gegenüber anderen Menschen\nzeigen\nUnterschiedliche Meinungen, Standpunkte und Erfahrungen\nrespektieren\nKonstruktives Feedback geben und würdevoll annehmen\nVerantwortung übernehmen und uns bei denjenigen entschuldigen, die\nvon unseren Fehlern betroffen sind, und aus den Erfahrungen lernen\nKonzentration auf das, was nicht nur für uns als Individuen, sondern\nfür die gesamte Gemeinschaft das Beste ist\nBeispiele für inakzeptables Verhalten sind:\nDie Verwendung sexualisierter Sprache, Bilder oder Symbolik sowie\nunerwünschte Versuche sexueller Annäherung\nBeleidigende oder abwertende Kommentare, persönliche oder politische\nAngriffe und trollen\nÖffentliche oder private Belästigungen\nDas Veröffentlichen von privaten Informationen Anderer, wie zum\nBeispiel physische oder elektronische Adressen, ohne deren ausdrückliche\nErlaubnis\nAnderes Verhalten, welches in einem professionellen Umfeld begründet\nals unangemessen betrachtet werden kann\nVerantwortlichkeiten\nbei der Durchsetzung\nDie Gemeinschaftsleitung ist verantwortlich dafür, unsere Standards\nfür ein akzeptables Benehmen klarzustellen und werden angemessen und\nfair korrigierende Maßnahmen ergreifen um auf jegliches Verhalten, das\nsie für unangemessen, bedrohlich oder beleidigend halten, zu\nreagieren.\nDie Gemeinschaftsleitung hat das Recht und die Verantwortung\nKommentare, Commits, Code, Wiki-Bearbeitungen, Support-Tickets und\nandere Beiträge, die nicht mit diesem Verhaltenskodex vereinbar sind zu\nentfernen, zu bearbeiten oder abzulehnen, und werden die Gründe für eine\nMäßigung mitteilen, wenn es angebracht ist.\nGeltungsbereich\nDieser Verhaltenskodex gilt für alle Gemeinschaftsbereiche und gilt\nauch, wenn eine Einzelperson die Gemeinschaft offiziell in öffentlichen\nBereichen vertritt. Beispiele für die Repräsentation unserer\nGemeinschaft sind die Verwendung einer offiziellen E-Mail-Adresse, das\nPosten über ein offizielles Social-Media-Konto oder das Auftreten als\nernannte Vertretung bei einer Online- oder Offline-Veranstaltung.\nUmsetzung\nFälle von missbräuchlichem, belästigendem oder anderweitig\ninakzeptablem Verhalten können unter [lars@lse.de] der für die Durchsetzung zuständigen\nGemeinschaftsleitung gemeldet werden. Alle Beschwerden werden zeitnah\nund fair geprüft und ermittelt.\nDie gesamte Gemeinschaftsleitung ist verpflichtet, die Privatsphäre\nund die Sicherheit derjenigen, die einen Vorfall gemeldet haben, zu\nrespektieren.\nDurchsetzungsrichtlinien\nDie Gemeinschaftsleitung wird sich bei der Bestimmung der\nKonsequenzen für jede Handlung, die ihrer Ansicht nach gegen diesen\nVerhaltenskodex verstößt, an diese Richtlinien über die Auswirkungen in\nder Gemeinschaft halten:\n1. Berichtigung\nAuswirkungen in der Gemeinschaft: Verwendung\nunangemessener Sprache oder anderes Verhalten, das in der Gemeinschaft\nals unprofessionell oder unwillkommen gilt.\nFolge: Eine private, schriftliche Verwarnung der\nGemeinschaftsleitung, die Klarheit über die Art des Verstoßes und eine\nErklärung dafür bietet, warum das Verhalten unangemessen war. Eine\nöffentliche Entschuldigung kann verlangt werden.\n2. Verwarnung\nAuswirkungen in der Gemeinschaft: Eine Verletzung\ndurch einen einzelnen Vorfall oder eine Reihe von Handlungen.\nFolge: Eine Warnung mit Konsequenzen bei\nwiederholtem Fehlverhalten. Keine Interaktion mit den beteiligten\nPersonen, einschließlich unaufgeforderter Interaktion mit denjenigen,\ndie den Verhaltenskodex durchsetzen, für einen bestimmten Zeitraum. Dazu\ngehört die Vermeidung von Interaktionen in Gemeinschaftsräumen sowie in\nexternen Kanälen wie sozialen Medien. Ein Verstoß gegen diese\nBedingungen kann zu einem vorübergehenden oder dauerhaften Verbot\nführen.\n3. Vorübergehender Ausschluss\nAuswirkungen in der Gemeinschaft: Eine\nschwerwiegende Verletzung von Gemeinschaftsstandards, einschließlich\nanhaltend unangemessenen Verhaltens.\nFolge: Ein zeitlich begrenztes Verbot jeglicher Art\nvon Interaktion oder öffentlicher Kommunikation mit der Gemeinschaft.\nWährend dieses Zeitraums ist keine öffentliche oder private Interaktion\nmit den beteiligten Personen erlaubt. Auch keine unaufgeforderte\nInteraktion mit denjenigen, die den Verhaltenskodex durchsetzen. Ein\nVerstoß gegen diese Bedingungen kann zu einem dauerhaften Verbot\nführen.\n4. Dauerhafter Ausschluss\nAuswirkungen in der Gemeinschaft: Aufzeigen eines\nMusters von Verletzungen der Gemeinschaftsstandards, einschließlich\nanhaltend unangemessenen Verhaltens, Belästigung einer Person oder\nAggression gegen oder Herabsetzung von Gruppen von Personen.\nFolge: Ein dauerhaftes Verbot jeglicher Art von\nöffentlicher Interaktion innerhalb der Gemeinschaft.\nBezug\nDieser Verhaltenskodex basiert auf dem Contributor Covenant,\nVersion 2.0, verfügbar unter https://www.contributor-covenant.org/de/version/2/0/code-of-conduct\n\n\n\n",
      "last_modified": "2022-04-20T10:53:58+02:00"
    },
    {
      "path": "code_of_conduct.html",
      "title": "Code of Conduct",
      "author": [],
      "contents": "\n\nContents\nVereinbarung\nüber Verhaltenskodex für Mitwirkende\nUnsere Verpflichtung\nUnsere Standards\nVerantwortlichkeiten\nbei der Durchsetzung\nGeltungsbereich\nUmsetzung\nDurchsetzungsrichtlinien\n1. Berichtigung\n2. Verwarnung\n3. Vorübergehender\nAusschluss\n4. Dauerhafter Ausschluss\n\nBezug\n\n\nVereinbarung\nüber Verhaltenskodex für Mitwirkende\nUnsere Verpflichtung\nWir als Mitglieder, Teilnehmende und Verantwortliche unserer\nGemeinschaft verpflichten uns bei der Teilnahme an dem Projekt und\nunserer Gemeinschaft zu einer belästigungsfreien Erfahrung für alle,\nunabhängig von Alter, Körpergröße, Behinderung, ethnischer Zuordnung,\ngeschlechtlicher Identität und Ausdruck, Grad der Erfahrung, Bildung,\nsozialem Status, Nationalität, persönlicher Erscheinung, Rasse, Religion\noder Geschlechtsidentität und sexueller Orientierung.\nWir verpflichten uns, in einer Weise zu handeln und zu interagieren,\ndie zu einer offenen, einladenden, vielfältigen, inklusiven und gesunden\nGemeinschaft beiträgt.\nUnsere Standards\nBeispiele für Verhaltensweisen, die zu einem positiven Umfeld für\nunsere Gemeinschaft beitragen, sind:\nEinfühlungsvermögen und Freundlichkeit gegenüber anderen Menschen\nzeigen\nUnterschiedliche Meinungen, Standpunkte und Erfahrungen\nrespektieren\nKonstruktives Feedback geben und würdevoll annehmen\nVerantwortung übernehmen und uns bei denjenigen entschuldigen, die\nvon unseren Fehlern betroffen sind, und aus den Erfahrungen lernen\nKonzentration auf das, was nicht nur für uns als Individuen, sondern\nfür die gesamte Gemeinschaft das Beste ist\nBeispiele für inakzeptables Verhalten sind:\nDie Verwendung sexualisierter Sprache, Bilder oder Symbolik sowie\nunerwünschte Versuche sexueller Annäherung\nBeleidigende oder abwertende Kommentare, persönliche oder politische\nAngriffe und trollen\nÖffentliche oder private Belästigungen\nDas Veröffentlichen von privaten Informationen Anderer, wie zum\nBeispiel physische oder elektronische Adressen, ohne deren ausdrückliche\nErlaubnis\nAnderes Verhalten, welches in einem professionellen Umfeld begründet\nals unangemessen betrachtet werden kann\nVerantwortlichkeiten\nbei der Durchsetzung\nDie Gemeinschaftsleitung ist verantwortlich dafür, unsere Standards\nfür ein akzeptables Benehmen klarzustellen und werden angemessen und\nfair korrigierende Maßnahmen ergreifen um auf jegliches Verhalten, das\nsie für unangemessen, bedrohlich oder beleidigend halten, zu\nreagieren.\nDie Gemeinschaftsleitung hat das Recht und die Verantwortung\nKommentare, Commits, Code, Wiki-Bearbeitungen, Support-Tickets und\nandere Beiträge, die nicht mit diesem Verhaltenskodex vereinbar sind zu\nentfernen, zu bearbeiten oder abzulehnen, und werden die Gründe für eine\nMäßigung mitteilen, wenn es angebracht ist.\nGeltungsbereich\nDieser Verhaltenskodex gilt für alle Gemeinschaftsbereiche und gilt\nauch, wenn eine Einzelperson die Gemeinschaft offiziell in öffentlichen\nBereichen vertritt. Beispiele für die Repräsentation unserer\nGemeinschaft sind die Verwendung einer offiziellen E-Mail-Adresse, das\nPosten über ein offizielles Social-Media-Konto oder das Auftreten als\nernannte Vertretung bei einer Online- oder Offline-Veranstaltung.\nUmsetzung\nFälle von missbräuchlichem, belästigendem oder anderweitig\ninakzeptablem Verhalten können unter [lars@lse.de] der für die Durchsetzung zuständigen\nGemeinschaftsleitung gemeldet werden. Alle Beschwerden werden zeitnah\nund fair geprüft und ermittelt.\nDie gesamte Gemeinschaftsleitung ist verpflichtet, die Privatsphäre\nund die Sicherheit derjenigen, die einen Vorfall gemeldet haben, zu\nrespektieren.\nDurchsetzungsrichtlinien\nDie Gemeinschaftsleitung wird sich bei der Bestimmung der\nKonsequenzen für jede Handlung, die ihrer Ansicht nach gegen diesen\nVerhaltenskodex verstößt, an diese Richtlinien über die Auswirkungen in\nder Gemeinschaft halten:\n1. Berichtigung\nAuswirkungen in der Gemeinschaft: Verwendung\nunangemessener Sprache oder anderes Verhalten, das in der Gemeinschaft\nals unprofessionell oder unwillkommen gilt.\nFolge: Eine private, schriftliche Verwarnung der\nGemeinschaftsleitung, die Klarheit über die Art des Verstoßes und eine\nErklärung dafür bietet, warum das Verhalten unangemessen war. Eine\nöffentliche Entschuldigung kann verlangt werden.\n2. Verwarnung\nAuswirkungen in der Gemeinschaft: Eine Verletzung\ndurch einen einzelnen Vorfall oder eine Reihe von Handlungen.\nFolge: Eine Warnung mit Konsequenzen bei\nwiederholtem Fehlverhalten. Keine Interaktion mit den beteiligten\nPersonen, einschließlich unaufgeforderter Interaktion mit denjenigen,\ndie den Verhaltenskodex durchsetzen, für einen bestimmten Zeitraum. Dazu\ngehört die Vermeidung von Interaktionen in Gemeinschaftsräumen sowie in\nexternen Kanälen wie sozialen Medien. Ein Verstoß gegen diese\nBedingungen kann zu einem vorübergehenden oder dauerhaften Verbot\nführen.\n3. Vorübergehender Ausschluss\nAuswirkungen in der Gemeinschaft: Eine\nschwerwiegende Verletzung von Gemeinschaftsstandards, einschließlich\nanhaltend unangemessenen Verhaltens.\nFolge: Ein zeitlich begrenztes Verbot jeglicher Art\nvon Interaktion oder öffentlicher Kommunikation mit der Gemeinschaft.\nWährend dieses Zeitraums ist keine öffentliche oder private Interaktion\nmit den beteiligten Personen erlaubt. Auch keine unaufgeforderte\nInteraktion mit denjenigen, die den Verhaltenskodex durchsetzen. Ein\nVerstoß gegen diese Bedingungen kann zu einem dauerhaften Verbot\nführen.\n4. Dauerhafter Ausschluss\nAuswirkungen in der Gemeinschaft: Aufzeigen eines\nMusters von Verletzungen der Gemeinschaftsstandards, einschließlich\nanhaltend unangemessenen Verhaltens, Belästigung einer Person oder\nAggression gegen oder Herabsetzung von Gruppen von Personen.\nFolge: Ein dauerhaftes Verbot jeglicher Art von\nöffentlicher Interaktion innerhalb der Gemeinschaft.\nBezug\nDieser Verhaltenskodex basiert auf dem Contributor Covenant,\nVersion 2.0, verfügbar unter https://www.contributor-covenant.org/de/version/2/0/code-of-conduct\n\n\n\n",
      "last_modified": "2022-04-20T10:53:58+02:00"
    },
    {
      "path": "ha-01-hallo-git.html",
      "title": "Hausaufgabe 01 - Hallo Git!",
      "author": [],
      "contents": "\n\nContents\nVerbindung zu\nGitHub und RStudio Cloud aufbauen\nErste Schritte\nAufwärmen\nYAML\nÄnderungen schreiben\n(commit)\nÄnderungen schieben\n(push)\n\nR Packages\nDaten\n\nÜbungen\nÜbung 1\nÜbung 2\nÜbung 3\nÜbung 4\nÜbung 5 (Bonus)\nÜbung 6 (Bonus)\n\n\nDas Hauptziel dieser Hausaufgabe ist es, dich mit R und RStudio\nbekannt zu machen. Ein zusätzliches Ziel ist es, dich in Git und GitHub\neinzuführen, das Kollaborations- und Versionskontrollsystem, das wir\nwährend des Kurses benutzen werden.\nIch ermutige dich im Laufe der Übungen über das hinauszugehen was die\nÜbungen vorgeben. Die Bereitschaft zu experimentieren wird dich zu einer\nbesseren Programmierin machen. Bevor wir soweit sind, ist es wichtig,\ndass du dir ein paar grundlegende Kenntnisse in R aneignest.\nHeute beginnen wir mit den grundlegenden Bausteinen von R und\nRStudio: die Benutzeroberfläche, das Einlesen von Daten und grundlegende\nBefehle.\nDieses erste Hausaufgabe wird von dir allein durchgeführt. In\nzukünfitgen Hausaufgabeen (oder auch Praktika) wirst du lernen, wie du\nauf GitHub in kleinen Teams zusammenarbeitest und einen Bericht für dein\nTeam erstellst.\nVerbindung zu\nGitHub und RStudio Cloud aufbauen\nDu solltest eine Einladung erhalten haben, um der GitHub Organisation\nfür diesen Kurs beizutreten. Diese Einladung musst du annehmen, bevor du\nmit dem nächsten Schritt fortfährst.\nÖffne deine Email welche du für deinen GitHub Konto hinterlegt\nhast\nKlicke auf “Join”\n\n\n\nUm deine RStudio und GitHub Konten zu verbinden, befolge die\nfolgenden Schritte:\nÖffne rstudio.cloud und login mit deinem Benutzerkonto (nutze\nGitHub)\nKlicke auf deinen Namen in der oberen rechten Ecke, um das rechte\nMenü zu öffnen.\nKlicke dann auf “Authentication”.\n\n\n\nAktiviere im Fenster Authentifizierung das Kontrollkästchen für\nEnabled neben GitHub.\n\n\n\nIm nächsten Fenster klickst du auf das grüne Kästchen mit der\nAufschrift “Authorize rstudio”.\n\n\n\nZurück im Authentifizierungsfenster in RStudio Cloud aktivierst du\nnun auch das Kästchen Private repo access also enabled\n\n\n\nWichtig: Falls Feld Organisation access\nnoch kein grünes Häkchen neben deinem Kursnamen auftaucht, klickst du\nnun zunächst auf “Request” neben deinem Kursnamen und folgend auf\n“Request approval from owners”.\nHinweis: Sollte hier kein Kurs auftauchen, könnte dies\nbedeueten, dass du die GitHub-Einladung zum Kurs noch nicht angenommen\nhast und du solltest zurückgehen und dies überprüfen und nacholen. Falls\ndu keine Einladung hast, kontaktiere mich.\nNun noch auf das grüne Feld “Authorize rstudio” und nach Eingabe\ndeines Passworts bist du bereit.\n\n\n\nSobald du fertig bist, sollten in RStudio Cloud beide Kästchen\nmarkiert sein.\n\n\n\nUm zu bestätigen, dass du deine GitHub- und RStudio-Cloud-Konten\nerfolgreich verknüpft hast, wähle GitHub settings >\nApplications. Du solltest RStudio als autorisierte App unter\nAuthorized OAuth Apps aufgelistet sehen. Falls nicht, ist dies\nein guter Zeitpunkt, um eine Frage zu stellen.\n\n\n\nErste Schritte\nJede deiner Aufgaben wird mit den folgenden Schritten beginnen,\nwelche hier im Detail beschrieben sind. In Zukunft wird jede Aufgabe mit\neinem Abschnitt “Erste Schritte” beginnen, aber mit etwas weniger\nDetails. Du kannst jedoch jederzeit auf diese Hausaufgabe zurückgreifen,\num eine detaillierte Liste der Schritte zu erhalten, die notwendig sind,\num mit einer Aufgabe zu beginnen.\nKlicke auf den Link welchen ich in einer E-Mail mit dem Betreff\n(Lars hat das Repo XYZ-Dein-GitHub-Name auf GitHub erstellt) mit dir\ngeteilt habe\nDies führt dich zu deinem persönlichen GitHub Repository (im\nFolgenden “Repo” genannt)\nDieses Repository enthält eine R Markdown (ha-01.Rmd) Vorlage, auf\nder du aufbauen kannst, um die Aufgabe zu lösen.\nAuf GitHub klickst du auf den grünen Code Button\nund wählst HTTPS wie im Bild unten. Klicke auf das\nKlemmbrett-Symbol, um die Repo-URL zu kopieren.\n\n\n\nÖffne nun RStudio Cloud und den Workspace für den Kurs. Klicke auf\nden Abwärtspfeil und erstelle ein New Project from Git\nRepository.\n\n\n\nFüge die URL aus deinem Repo oben in das Dialogfeld ein und stelle\nsicher, dass das Häkchen bei “Packages” gesetzt ist.\n\n\n\n\n\n\nKlicke auf OK, habe etwas Geduld, und du bist bereit zum\nlogslegen!\nAufwärmen\nBevor wir uns die Daten anschauen, machen wir noch ein paar\nAufwärmübungen um die R Markdown vorzustellen.\nYAML\nIm RStudio Cloud Workspace für den Kurs, klicke auf “Projects”\nÖffne dein Projekt in dem du darauf klickst (ha01-GitHubName)\nÖffne die R Markdown (ha-01.Rmd) Datei in deinem Projekt\n(Tipp: Sie befindet sich in dem Ansichtsfenster unten\nrechts unter dem Reiter “Files”)\nÄndere den Autorennamen zu deinem Namen, füge ein Datum hinzu und\nstricke (‘knit’) das Dokument.\n\n\n\n\n\n\nDer obere Teil deiner R Markdown Datei (zwischen den drei\ngestrichelten Linien) wird YAML genannt. Es steht für “YAML Ain’t Markup\nLanguage”. Es ist ein menschenfreundlicher Standard zur Serialisierung\nvon Daten für alle Programmiersprachen. Alles, was du wissen musst, ist,\ndass dieser Bereich YAML genannt wird (wir werden ihn als solchen\nbezeichnen) und dass er Metainformationen über dein Dokument\nenthält.\nÄnderungen schreiben (commit)\nIn deinem RStudio, öffne das Fenster mit dem Titel Git im\nAnsichtsfenster oben rechts.\nWenn du Änderungen an deiner Rmd-Datei gemacht hast, solltest du nun\nhier den Dateinamen sehen. Wähle die Datei aus der Liste aus indem du\nsie anklickst. Dann klicke auf Diff über den\nDateinamen.\nEin neues Fenster öffnet sich welche dir die Differenz\nzwischen dem letzten commit-Zustand des Dokuments (rot) und dem\naktuellen aktuellen Zustand zeigt (grün), welcher deine Änderungen\nbeinhaltet.\nWenn du mit diesen Änderungen zufrieden bist, klicke auf das\nKontrollkästchen neben dem Dateinamen um einen Haken zu setzen und\nschreibe “Aktualisiere Autorenname und Datum” in das Feld Commit\nmessage. Klicke anschliessend auf Commit.\n\n\n\nDu musst nicht nach jeder Änderung committen, sondern Zustände, die\nfür dich bedeutsam sind, um sie zu überprüfen, zu vergleichen\noder wiederherzustellen.\nIn den ersten paar Aufgaben werden wir dir genau sagen, wann und mit\nwelchem Text du committen solltest. Im weiteren Verlauf des Kurses wirst\ndu diese Entscheidungen dann selbst treffen.\nÄnderungen schieben (push)\nJetzt, wo du ein Update gemacht und diese Änderung committed hast,\nist es an der Zeit, diese Änderungen ins Web zu pushen!\nOder genauer gesagt, in dein Repo auf GitHub. Warum das? Damit Andere\ndeine Änderungen sehen können. Und mit Anderen meinen wir das Kursteam\n(deine Repos in diesem Kurs sind für dich und uns privat).\nDoch bevor du dies ausführen kannst, musst du noch einen GitHub\nPersonal Access Token (PAT) setzen und für dich speichern. GitHub\nerlaubt diesen Zugang über externe Applikationen seit dem 13. August\n2021 nicht mehr über das Benutzerpasswort. Die Anweisungen um einen PAT\nzu erstellen findest du hier:\nhttps://github.com/rstatsZH/kochbuch/tree/main/05-github-pat\nUm deine Änderungen nun auf GitHub zu pushen, klicke auf\nPush. Daraufhin erscheint ein Dialogfenster, in dem du\nzuerst deinen Benutzernamen und dann deinen erstellen Personal Access\nToken (PAT).\n\n\n\nR Packages\nIn dieser Hausaufgabe werden wir mit zwei R Packages arbeiten:\ndatasauRus, welches den Datensatz enthält, den wir\nverwenden werden und tidyverse. Diese Packages sind\nbereits für dich installiert. Du kannst sie laden indem du den folgenden\nCode-chunk in deiner R Markdown Datei ausführst.\n\n\nlibrary(tidyverse) \nlibrary(datasauRus)\n\n\n\nBeachte, dass die Packages auch mit den gleichen Befehlen in deinem R\nMarkdown Dokument geladen werden.\nDaten\nDer Datensatz, mit dem wir heute arbeiten werden, heißt\ndatasaurus_dozen und befindet sich im R Package\ndatasauRus. Eigentlich enthält dieser einzelne Datensatz 13\nweitere Datensätze, die uns zeigen sollen, warum Datenvisualisierung\nwichtig ist und wie zusammenfassende Statistiken allein irreführend sein\nkönnen. Die verschiedenen Datensätze sind durch die Variable\ndataset (Spalte) gekennzeichnet.\nUm mehr über das Dataset herauszufinden, gib folgendes in deine\nConsole ein: ?datasaurus_dozen. Ein Fragezeichen vor dem\nNamen eines Objekts ruft immer dessen Hilfedatei auf. Ich habe für dich\nauch einen Code-chunk hinzugefügt welcher den Code enthält um die\nHilfe-Datei für datasaurus_dozen zu öffnen.\nÜbungen\nÜbung 1\nÖffne die Hilfedatei für datasaurus_dozen\nWie viele Zeilen und wie viele Spalten hat der Datensatz\ndatasaurus_dozen?\nWas sind die Variablen, die im Dataframe enthalten sind?\nFüge deine Antworten zu deinem R Markdown Bericht hinzu.\nSchauen wir uns an, was diese Datensätze sind. Dazu können wir eine\nHäufigkeitstabelle (frequency table) der dataset Variable\nerstellen:\n\n\ndatasaurus_dozen %>% \n  group_by(dataset) %>% \n  count() \n\n\n# A tibble: 13 × 2\n# Groups:   dataset [13]\n   dataset        n\n   <chr>      <int>\n 1 away         142\n 2 bullseye     142\n 3 circle       142\n 4 dino         142\n 5 dots         142\n 6 h_lines      142\n 7 high_lines   142\n 8 slant_down   142\n 9 slant_up     142\n10 star         142\n11 v_lines      142\n12 wide_lines   142\n13 x_shape      142\n\nDer ursprüngliche Datasaurus (dino) wurde von Alberto\nCairo in diesem\ngroßartigen Blogpost erstellt. Das andere Dutzend wurde mit Hilfe\nvon Simulated Annealing generiert und der Prozess wird in dem Paper\nSame Stats, Different Graphs: Generating Datasets with Varied\nAppearance and Identical Statistics through Simulated Annealing1 von Justin Matejka und George\nFitzmaurice beschrieben. In dem Paper simulieren die Autoren eine\nVielzahl von Datensätzen, die die gleichen zusammenfassenden Statistiken\nwie der Datasaurus haben, aber sehr unterschiedliche Verteilungen\naufweisen.\n🧶 ✅ ⬆️ Knit, commit und push deine Änderungen auf GitHub mit\nder Commit-Nachricht “Füge Antwort für Übung 1 hinzu.” Achte darauf,\nalle geänderten Dateien zu committen und zu pushen, damit dein\nGit-Fenster danach aufgeräumt ist.\nÜbung 2\nUnten findest du den Code, den du brauchst, um diese nächste Übunge\nzu lösen. Die Antworten für 1 und 2 sind schon gegeben und auch in\ndeiner R Markdown Datei enthalten.\nPlot y gegen x für den dino\nDatensatz (Code ist in R Markdown Datei)\nBerechne dann den Korrelationskoeffizienten zwischen “x” und “y” für\ndiesen Datensatz. (Code ist in R Markdown Datei)\nKlicke auf knit um das Dokument zu stricken\nCode vorlesen\nHier siehst du neuen Code, welchen wir noch nicht im Kurs behandelt\nhaben. Dieser kann folgendermassen gelesen werden:\nBeginne mit dem datasaurus_dozen und leite es in die\nFunktion filter, um nach Beobachtungen zu filtern, bei\ndenen dataset == \"dino\" ist. Speichere den resultierenden\ngefilterten Dataframe als einen Dataframe namens\ndino_data.\n\n\ndino_data <- datasaurus_dozen %>%\n  filter(dataset == \"dino\")\n\n\n\nHier geht eine ganze Menge vor sich, also lassen wir es langsam\nangehen und nehmen es Schritt für Schritt auseinander.\nErstens, der Pipe-Operator: %>%, nimmt das, was davor\nkommt und sendet es als erstes Argument an das, was danach kommt. Hier\nsagen wir also, dass wir den datasaurus_dozen Dataframe\nnach Beobachtungen filtern, bei denen dataset == \"dino\"\nist.\nZweitens, der Zuweisungsoperator: <-, weist dem\ngefilterten Dataframe den Namen dino_data zu.\nAls nächstes wollen wir diese Daten visualisieren. Dafür verwenden\nwir die Funktion ggplot(). Das erste Argument sind die\nDaten, die wir visualisieren wollen. Als nächstes definieren wir die\naesthetischen Mappings (visuelle Eigenschaften). In anderen\nWorten, die Spalten der Daten, die auf bestimmte visuelle Eigenschaften\ndes Plots abgebildet werden, z.B. wird die x-Achse die\nVariable namens x und die y-Achse die Variable\nnamens y repräsentieren.\nDann fügen wir eine weitere Ebene zu diesem Diagramm hinzu, in der\nwir definieren, welche geometrischen Formen wir verwenden wollen, um\njede Beobachtung in den Daten darzustellen. In diesem Fall wollen wir,\ndass es sich um Punkte handelt, daher geom_point().\n\n\nggplot(data = dino_data, mapping = aes(x = x, y = y)) +\n  geom_point()\n\n\n\n\nNächste Woche wirst du mehr über die Philosophie der\nDatenvisualisierung in Layern erfahren. Für den Moment kannst du dem\nCode folgen, welcher dir zur Verfügung gestellt wird.\nFür den zweiten Teil dieser Übungen müssen wir eine zusammenfassende\nStatistik berechnen: den Korrelationskoeffizienten. Der\nKorrelationskoeffizient, in der Statistik oft als \\(r\\) bezeichnet, misst den linearen\nZusammenhang zwischen zwei Variablen.\nDu wirst sehen, dass einige der Variablenpaare, die wir darstellen,\nkeinen linearen Zusammenhang zwischen ihnen haben. Das ist genau der\nGrund, warum wir zuerst visualisieren wollen: visualisieren, um die Form\nder Beziehung zu beurteilen, und \\(r\\)\nnur berechnen, wenn es relevant ist.\nIn diesem Fall macht die Berechnung eines Korrelationskoeffizienten\nwirklich keinen Sinn, da die Beziehung zwischen x und\ny definitiv nicht linear ist - sie ist dinosaurierhaft!\nAber zur Veranschaulichung lass uns den Korrelationskoeffizienten\nzwischen “x” und “y” berechnen.\nBeginne mit dino_data und berechne eine\nzusammenfassende Statistik, die wir r nennen werden, als\ndie Beziehung (cor) zwischen x und\ny.\n\n\ndino_data %>%\n  summarize(r = cor(x, y))\n\n\n# A tibble: 1 × 1\n        r\n    <dbl>\n1 -0.0645\n\n🧶 ✅ ⬆️ Knit, commit, und pushe deine Änderungen auf GitHub mit\nder Commit-Nachricht “Füge Antwort für Übung 2 hinzu.” Achte darauf,\nalle geänderten Dateien zu committen und zu pushen, damit dein\nGit-Fenster danach aufgeräumt ist.\nÜbung 3\nPlotte y gegen x für den star\nDatensatz.\nDu kannst (und solltest) den Code, den wir oben genutzt,\nwiederverwenden, ersetze den Namen des Datensatzes durch den gewünschten\nDatensatz. Berechne dann den Korrelationskoeffizienten zwischen “x” und\n“y” für diesen Datensatz. Wie ist dieser Wert im Vergleich zu\nr von dino?\n🧶 ✅ ⬆️ Dies ist ein weiterer guter Ort, um zu pausieren, zu\nstricken (knit), Änderungen mit der Commit-Nachricht “Füge Antwort für\nÜbung 3 hinzu.” zu committen und zu pushen. Achte darauf, alle\ngeänderten Dateien zu committen und zu pushen, damit dein Git-Fenster\ndanach aufgeräumt ist.\nÜbung 4\nPlotte y gegen x für den\ncircle Datensatz.\nDu kannst (und solltest) den Code, den wir oben genutzt,\nwiederverwenden, ersetze den Namen des Datensatzes durch den gewünschten\nDatensatz. Berechne dann den Korrelationskoeffizienten zwischen “x” und\n“y” für diesen Datensatz. Wie ist dieser Wert im Vergleich zu\nr von dino?\n🧶 ✅ ⬆️ Du kannst erneut pausieren, die Änderungen mit der\nCommit-Nachricht “Füge Antwort für Übung 4 hinzu.” committen und pushen.\nAchte darauf, alle geänderten Dateien zu committen und zu pushen, damit\ndein Git-Fenster danach aufgeräumt ist.\nSuper! Ich hoffe, dass du es schaffst in der Hausaufgabe bis hierhin\nzu kommen. Die nächsten beiden Übungen sind Bonus Übungen falls du Lust\nhast noch etwas weiter zu arbeiten.\nÜbung 5 (Bonus)\nZum Schluss wollen wir alle Datensätze auf einmal darstellen. Um dies\nzu tun, werden wir Method für eine Facettierung nutzen.\nMit einer Facette (facet) durich die Variable dataset,\nplatzieren wir die Plots in einem Raster aus drei Spalten, entfernen die\nLegende und geben der Variable dataset eine visuelle\nEigenschaft (aesthetic) indem wir es dem Argument ‘color’ zuordnen.\n\n\nggplot(datasaurus_dozen, aes(x = x, y = y, color = dataset))+\n  geom_point()+\n  facet_wrap(~ dataset, ncol = 3) +\n  theme(legend.position = \"none\")\n\n\n\nUnd wir können die Funktion group_by() in Kombination\nmit der Funktion summarize() verwenden, um alle\nzusammenfassenden Korrelationskoeffizienten zu erzeugen.\n\n\ndatasaurus_dozen %>%\n  group_by(dataset) %>%\n  summarize(r = cor(x, y)) \n\n\n\nÜbung 6 (Bonus)\nGratulation! Du hast die Übungen abgeschlossen. Zwei Dinge noch:\n\n\n\n(1) Ändere die Grösse deiner Abbildungen\nKlicke auf das Zahnradsymbol oben im R Markdown Dokument und wähle\n“Output Options…” im Dropdown-Menü. In dem sich öffnenden Dialogfenster\ngehst du zum Reiter “Figures” und änderst die Höhe und Breite der\nFiguren und klickst auf “OK”, wenn du fertig bist. Dann stricke dein\nDokument und schaue, wie dir die neuen Größen gefallen. Ändere und\nstricke wieder und wieder, bis du mit den Figurengrößen zufrieden bist.\nSchau dir den YAML-Header an und beachte, dass diese Werte dort\ngespeichert werden, was bedeutet dass du diese auch hier ändern\nkannst.\n\n\n\nDu kannst auch verschiedene Größen für unterschiedliche Abbildungen\nverwenden. Klicke dazu auf das Zahnradsymbol innerhalb des Chunks, in\ndem du eine Änderung vornehmen möchtest. Das Ändern der Abbildungsgrößen\nhat neue Optionen zu diesen Chunks hinzugefügt: fig.width\nund fig.height. Du kannst sie auch ändern, indem du\nverschiedene Werte direkt in deinem R Markdown Dokument definierst.\n\n\n\n(2) Ändere das Aussehen deines Berichts:\nKlicke erneut auf das Zahnradsymbol oben im R Markdown Dokument und\nwähle “Output Options…” im Dropdown-Menü. Probiere im Reiter “General”\ndes sich öffnenden Dialogfeldes verschiedene Optionen für die\nSyntaxhervorhebung (Syntax Highlighting) und das Design (Appl,y theme)\naus. Klicke auf OK und stricke dein Dokument. Du kannst mit diesen\nOptionen herumspielen, bis du mit dem Aussehen zufrieden bist.\nBravo, du bist fertig! Übertrage alle verbleibenden Änderungen,\nverwende die Commit-Nachricht “Fertig mit Hausaufgabe 1! ” und\npushe. Achte darauf, alle geänderten Dateien zu committen und zu pushen,\ndamit dein Git-Fenster danach aufgeräumt ist. Bevor du die Aufgabe\nbeendest, stelle sicher, dass alle Dokumente in deinem GitHub Repository\naktualisiert sind.\n\nMatejka, Justin, and George\nFitzmaurice. “Same stats, different graphs: Generating datasets with\nvaried appearance and identical statistics through simulated annealing.”\nProceedings of the 2017 CHI Conference on Human Factors in Computing\nSystems. ACM, 2017.↩︎\n",
      "last_modified": "2022-04-20T10:54:00+02:00"
    },
    {
      "path": "ha-02-hallo-ogd.html",
      "title": "Hausaufgabe 02 - Hallo Open (Government) Data",
      "author": [],
      "contents": "\n\nContents\nZiele\nErste Schritte\nPackages\nData\nÜbungen\nÜbung 1\nÜbung 2\nÜbung 3\nÜbung 4 (Bonus)\n\n\nDas Portal opendata.swiss stellt der Allgemeinheit offene\nBehördendaten in einem zentralen Katalog zur Verfügung. Es wird\nbetrieben vom Bundesamt für Statisik und ist ein gemeinsames Projekt von\nBund, Kantonen, Gemeinden und weiteren Organisationen mit einem\nstaatlichen Auftrag. In dieser Hausaufgabe nutzen wir den Datensatz “Corona\nHilfen im Kulturbereich im Kanton Zürich” publiziert am 04. März\n2021 von der Fachstelle Open Government Data des Kantons Zürich, und der\nFachstele Kultur der Direktion der Justiz und des Innern.\nZiele\nDiese Hausaufgabe hat die folgenden Ziele:\neinen OGD Datensatz von opendata.swiss zu erkunden\nVisualisierungen zu rekonstruieren\nMehr Übung mit Git und GitHub zu bekommen\nErste Schritte\nÖffne deine Email Inbox und suche nach der Email mit dem Link für das\nGitHub Repo zu dieser Hausaufgabe (ha-02-hallo-ogd). Alternativ kannst\ndu GitHub öffnen und in unserer GitHub Organisation nach dem Repo mit\ndeinem Namen suchen.\nFolge den Schritten aus Hausaufgabe 1 oder den Folien der Woche 2 um\ndas GitHub Repo in deine RStudio Cloud zu clonen.\nPackages\nIn dieser Hausaufgabe lernst du ein zwei R Packages kennen, welche\nwir in Woche 3 in mehr Detail behandeln werden. Das {readr}\nund das {dplyr} Package, welche beide zur Sammlung der\n{tidyverse} Packages gehören.\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(readr)\n\n\n\nData\nWir nutzen den Datensatz mit dem Titel “Corona\nHilfen im Kulturbereich im Kanton Zürich” publiziert am 04. März\n2021 von der Fachstelle Open Government Data des Kantons Zürich,\nFachstele Kultur (Direktion der Justiz und des Innern).\n\n\n\nDie Beschreibung der Variablen ist auf der Ressource\nfür den Datensatz zu finden:\nKategorie = Antragstellende Kategorie\n(‘Kulturschaffende’, ‘Kulturunternehmen gemeinnützig’ oder\n‘Kulturunternehmen gewinnorientiert’)\nSparte = Kultursparte (‘Bereichsübergreifend’,\n‘Bildende Kunst’, ‘Design’, ‘Film’, ‘Kino’, ‘Klubs und Konzertlokale’,\n‘Literatur’, ‘Museen’, ‘Musik’ oder ‘Tanz/Theater’)\nNachgefragt = Nachgefragter Betrag in CHF (gerundet\nauf 100 CHF)\nBeschluss = Beschlossener Betrag in CHF (gerundet\nauf 100 CHF, ‘NA’ bei Ablehnung)\nStatus = Status des Antrags (‘Ablehnung’,\n‘Ausbezahlt’ oder ‘Saldo offen’)\nEingangsdatum = Datum des Eingangs des Gesuchs;\n‘Beschlussdatum’ = Datum des Beschlusses über das Gesuch\nID = anonymisierter Identifikator der\nantragstellenden natürlichen oder juristischen Person\nÜbungen\nÜbung 1\nErinnerst du dich, dass RStudio in vier Bereiche unterteilt ist?\nVersuche diese, ohne nachzuschauen, zu benennen.\nAufgaben\nFüge deine Antworten zu der R Markdown Datei für die Hausaufgabe\nhinzu\nStricke das Dokument und verifiziere, dass es keine Fehlermeldung\ngibt\n🧶 ✅ ⬆️ Knit, commit, und pushe deine Änderungen auf GitHub mit\nder Commit-Nachricht “Füge Antwort für Übung 1 hinzu.” Achte darauf,\nalle geänderten Dateien zu committen und zu pushen, damit dein\nGit-Fenster danach aufgeräumt ist.\nÜbung 2\nVerifiziere, dass der Datensatz corona_kultur in deinem\nEnvironment (Fenster oben rechts) in RStudio zu finden ist. Wieviele\nBeobachtungen gibt es in diesem Datensatz?\nAufgaben\nIm RStudio Environment, klicke auf den Namen das Datensatzes\ncorona_kultur\nFühre den Code View(corona_kultur) in der\nConsole aus.\nNutze die Funktionen glimpse() und str()\nin einem R Code-chunk um die Daten zu erkunden\nFühre das Objekt corona_kultur in der Console aus?\nKannst du die Anzahl Reihen und Spalten im Output finden?\nWelche zwei weiteren Funktionen kennst du um die Anzahl der Reihen\nund Spalten eines Datensatzes zu erfahren?\nIn der Spalte Beschluss taucht immer wieder der Wert\n‘NA’ auf. Was bedeutet dies? Generell, und für diesen Datensatz?\n🧶 ✅ ⬆️ Knit, commit, und pushe deine Änderungen auf GitHub mit\nder Commit-Nachricht “Füge Antwort für Übung 2 hinzu.” Achte darauf,\nalle geänderten Dateien zu committen und zu pushen, damit dein\nGit-Fenster danach aufgeräumt ist.\nÜbung 3\nSchauen wir uns zuerst die Verteilung der Beträge an, welche\nnachgefragt wurden. Wir sehen, dass eine grosse Anzahl an kleineren\nBeträgen (< 100’000 CHF) beantragt wurde, und das einige grosse\nBeträge (> 2’000’000 CHF) bentragt wurden. Ein Antrag mit über 10\nMillionen CHF sticht ganz besonders heraus und führt dazu, dass dieser\nPlot nicht besonders schön ist.\nCode vorlesen: Nutze das Objekt\ncorona_kultur und plotte ein Histogram mit der der\nVerteilung der nachgefragten Beträge auf der x-Achse. Zähle die Anzahl\nder Gesuche pro 100’000 CHF auf der y-Achse.\n\n\nggplot(data = corona_kultur, aes(x = Nachgefragt)) +\n  geom_histogram(binwidth = 100000)\n\n\n\n\nCode vorlesen: Beginne mit dem Objekt\ncorona_kultur und leite es in die Funktion\nfilter(), um nach Beobachtungen zu filtern, bei denen die\nVariable ‘Nachgefragt’ grösser 2’000’000 ist. Ordne den Datensatz dann\nin absteigender Reihenfolge nach der Variable ‘Nachgefragt’\n\n\ncorona_kultur %>% \n  filter(Nachgefragt > 2000000) %>% \n  arrange(desc(Nachgefragt)) \n\n\n# A tibble: 9 × 8\n  Kategorie          Sparte Nachgefragt Beschluss Status Eingangsdatum\n  <chr>              <chr>        <dbl>     <dbl> <chr>  <date>       \n1 Kulturunternehmen… Kino      10749500   2531400 Ausbe… 2020-11-30   \n2 Kulturunternehmen… Musik      3156000         0 Ausbe… 2020-04-29   \n3 Kulturunternehmen… Tanz/…     2730800   1517900 Ausbe… 2020-09-20   \n4 Kulturunternehmen… Musik      2722200   2091900 Ausbe… 2020-09-20   \n5 Kulturunternehmen… Musik      2519000         0 Ausbe… 2020-05-20   \n6 Kulturunternehmen… Klubs…     2391000    272200 Ausbe… 2020-07-20   \n7 Kulturunternehmen… Tanz/…     2368000   1566400 Ausbe… 2020-04-30   \n8 Kulturunternehmen… Klubs…     2159400    578400 Ausbe… 2020-04-13   \n9 Kulturunternehmen… Berei…     2049100        NA Ableh… 2020-09-15   \n# … with 2 more variables: Beschlussdatum <date>, ID <chr>\n\nIn den folgenden Aufgaben wollen wir uns nur mit Beobachtungen\nbeschäftigen bei welchen die Variable ‘Beschluss’ kleiner 100’000 CHF\nist. Dazu wird der Datensatz gefiltert und als ein neues Objekt in dem\nRStudio Environment gespeichert. Ich habe den Code für dich\nvorbereitet.\n\n\ncorona_kultur_beschluss_gering <- corona_kultur %>% \n  filter(Beschluss < 100000) \n\n\n\nAufgaben\nNutze die Daten im Objekt\ncorona_kultur_beschluss_gering um mit der Funktion\nggplot() einen Plot zu erstellen\nNutze die Variable ‘Beschluss’ für die x-Achse\nNutze das Geom für ein Histogram für die Darstellung des Plots\n(Tipp: geom_histogram)\nFühre den Code aus und betrachte den Plot\nOrdne die Variable ‘Sparte’ der der visuellen Eigenschaft für Farben\nzu (Tipp: Schaue in Praktikum 3 oder 4 nach wie du es\ndort gemacht hast)\nFühre den Code aus und betrachte den Plot\nNutze Faceting und lege die Variable ‘Kategorie’ auf die Spalten\n(Tipp: Schaue in Praktikum 4 nach wie du es dort\ngemacht hast)\nFühre den Code aus und betrachte den Plot\nInnerhalb der Klammern der Funktion geom_histogram(),\nfüge das Argument ‘binwidth’ hinzu uns setze den Wert auf 10000\n(Tipp: binwidth = 10000). Was bewirkt\ndieses Argument?\nFühre den Code aus und betrachte den Plot\nFüge einen Titel, einen Untertitiel und eine Bildunterschrift\n(caption) hinzu. (Tipp: Schaue in den Folien für Woche\n2 nach)\n🧶 ✅ ⬆️ Knit, commit, und pushe deine Änderungen auf GitHub mit\nder Commit-Nachricht “Füge Antwort für Übung 3 hinzu.” Achte darauf,\nalle geänderten Dateien zu committen und zu pushen, damit dein\nGit-Fenster danach aufgeräumt ist.\nGratulation! Du hast die Übungen abgeschlossen. Falls du noch Lust\nund Zeit hast, ist hier noch eine Bonusaufgabe.\nÜbung 4 (Bonus)\nNutze das Objekt corona_kultur und erstelle eine\nSäulendiagram (geom_bar)\nOrdne die Variable ‘Sparte’ der visuellen Eigenschaft für Farben\nzu\nOrdne der x-Achse eine kategoriale Variable ‘Status’ zu (anstatt\neiner numerischen Variable ‘Beschluss’)\nNutze Faceting und lege die Variable ‘Kategorie’ auf die\nSpalten\nFüge einen Titel, einen Untertitiel und eine Bildunterschrift\n(caption) hinzu.\nÄndere die Position der Legende auf den unteren Bereich des Plots\n(Tipp: Schau nach was wir in Übung 2 aus Praktikum 4\ngemacht haben und ersetze ‘none’ durch ‘bottom’)\n🧶 ✅ ⬆️ Knit, commit, und pushe deine Änderungen auf GitHub mit\nder Commit-Nachricht “Füge Antwort für Übung 4 hinzu.” Achte darauf,\nalle geänderten Dateien zu committen und zu pushen, damit dein\nGit-Fenster danach aufgeräumt ist.\n\n\n\n",
      "last_modified": "2022-04-20T10:54:03+02:00"
    },
    {
      "path": "ha-03-hallo-dplyr.html",
      "title": "Hausaufgabe 03 - Hallo dyplr",
      "author": [],
      "contents": "\n\nContents\nZiele\nErste Schritte\nPackages\nData\nÜbungen\nAufwärmen 1\nÜbung 1 - dplyr::filter()\nÜbung 2 -\ndplyr::arrange() - Noch nicht im Kurs behandelt\nÜbung 3 -\ndplyr::select() - Noch nicht im Kurs behandelt\n\n\nVisualisierung ist ein wichtiges Werkzeug um Daten zu erkunden. In\nden seltensten Fällen kommen Daten jedoch in genau der Form welche\nbenötigt wird um hilfreiche Visualisierungen zu erstellen. Es werden\noftmals neue Variablen erstellt, Zusammenfassungen erzeugt, oder\nmöglicherweise werden Variablen umbenannt und umgeordnet, damit\neffizient damit gearbeitet werden kann. Das R Package\n{dplyr} aus der Sammlung der {tidyverse}\nPackages ist genau für diese Arbeit gemacht wurden, welche auch oft als\nData Tansformation, Data Manipulation, oder auch Data Wrangling betitelt\nwird.\nZiele\nDiese Hausaufgabe hat die folgenden Ziele:\nErfahrungen mit den Hauptfunktionen des {dplyr} Package\nsammeln\nÜbungen aus dem Buch R for Data\nScience lösen\nBei Fragen unseren Slack Channel für den Kurs nutzen\nErste Schritte\nÖffne deine Email Inbox und suche nach der Email mit dem Link für das\nGitHub Repo zu dieser Hausaufgabe (ha-03-hallo-dplyr). Alternativ kannst\ndu GitHub öffnen und in unserer GitHub Organisation nach dem Repo mit\ndeinem Namen suchen.\nFolge den Schritten aus Hausaufgabe 1 oder den Folien der Woche 2 um\ndas GitHub Repo in deine RStudio Cloud zu clonen.\nPackages\nIn dieser Hausaufgabe nutzen wir das {dplyr} Package und\nein weiteres Daten Package names {nycflights13} um\nwesentliche Konzepte aus der letzten Lektionen zu üben. Das Package ist\nnoch nicht installiert und ihr müsst dies in einem ersten Schritt selbst\nmachen.\n❗ 1. In der R Konsole: Installiere das\n{nycflights13} R package mit der Funktion\ninstall.packages(\"\")\n\n\nlibrary(dplyr)\nlibrary(nycflights13)\n\n\n\nData\nWir nutzen den Dataframe flights aus dem\n{nycflights13} R Package. Die Rohdaten für diesen Datensatz\nstammen aus dem United States\nDepartment of Transportation - Bureau of Transportation Statistics\nund wurden für das Buch R for Data Science aufbereitet und als Daten\nPackage bereitgestellt.\nDer Datensatz enthält alle 336.776 Flüge, die in 2013 von New York\nCity abgegegangen sind. Der Datensatz beinhaltet 19 Variablen, welche im\nDetail der Hilfedatei beschrieben sind und mit ?flights\naufgerufen werden können.\n\n\nglimpse(flights)\n\n\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 201…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, …\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2,…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, …\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EW…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FL…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, …\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 20…\n\nDas Daten Package beinhaltet noch vier weitere nützliche\nDatensätze:\nairlines: Beinhaltet den Namen der\nFluggesellschaft für die Variable carrier aus dem\nflights Datensatz\nairports: Beinhaltet Metadaten zu den\neinzelnen Flughäfen in der Variable dest aus dem\nflights Datensatz\nplanes: Beinhaltet Metadaten zu den einzelnen\nFlugzeugen in der Variable tailnum aus dem\nflights Datensatz\nweather: Beinhaltet stündliche meterologische\nDaten für die Flughäfen LGA (La Guardia), JFK (John F Kennedy Intl) und\nEWR (Newark Liberty Intl).\nDu kannst mehr über die Datensätze in der Hilfedatei lernen oder\ndiese mit der View() Funktion öffnen und erkunden.\n\n\nView(airlines)\nView(airports)\nView(planes)\nView(weather)\n\n\n\nÜbungen\nAufwärmen 1\nÖffne die R Markdown Datei für die Übung\nAktualisiere den YAML Header in dem du deinen Namen und das Datum\nhinzufügst\nPasse das Aussehen des Dokuments über die “Output Options” an (siehe\nScreenshots)\n🧶 ✅ ⬆️ Knit, commit und push deine Änderungen auf GitHub mit\neiner Commit-Nachricht deiner Wahl. Achte darauf, alle geänderten\nDateien zu committen und zu pushen, damit dein Git-Fenster danach\naufgeräumt ist.\n\n\n\n\n\n\nÜbung 1 - dplyr::filter()\nLese das Kapitel 5.1\n- Introduction aus dem Buch R for Data Science, mache dir Notizen\nund schreibe dir Fragen auf wenn du etwas nicht nachvollziehen kannst.\nStelle deine Fragen in unserem Slack Channel für den Kurs.\nLese das Kapitel\n5.2 - Filter rows with filter() aus dem Buch R for Data\nScience, mache dir Notizen und schreibe dir Fragen auf wenn du etwas\nnicht nachvollziehen kannst. Stelle deine Fragen in unserem Slack\nChannel für den Kurs.\nArbeite durch die Übungen aus Kapitel 5.2.4 -\nExercises. Stelle Fragen in unserem Slack Channel für den\nKurs.\n🧶 ✅ ⬆️ Knit, commit und push deine Änderungen auf GitHub mit\neiner Commit-Nachricht deiner Wahl. Achte darauf, alle geänderten\nDateien zu committen und zu pushen, damit dein Git-Fenster danach\naufgeräumt ist.\nÜbung 2 -\ndplyr::arrange() - Noch nicht im Kurs behandelt\nLese das Kapitel\n5.3 - Arrange rows with arrange() aus dem Buch R for\nData Science, mache dir Notizen und schreibe dir Fragen auf wenn du\netwas nicht nachvollziehen kannst. Stelle deine Fragen in unserem Slack\nChannel für den Kurs.\nArbeite durch die Übungen aus Kapitel 5.3.1 -\nExercises. Stelle Fragen in unserem Slack Channel für den\nKurs.\n🧶 ✅ ⬆️ Knit, commit und push deine Änderungen auf GitHub mit\neiner Commit-Nachricht deiner Wahl. Achte darauf, alle geänderten\nDateien zu committen und zu pushen, damit dein Git-Fenster danach\naufgeräumt ist.\nÜbung 3 -\ndplyr::select() - Noch nicht im Kurs behandelt\nLese das Kapitel 5.4 - Select\ncolumns with select() aus dem Buch R for Data Science,\nmache dir Notizen und schreibe dir Fragen auf wenn du etwas nicht\nnachvollziehen kannst. Stelle deine Fragen in unserem Slack Channel für\nden Kurs. Es werden dir sogenannte “helper functions”\nvorgestellt, welche wir im Kurs noch nicht behandelt haben. Folgt dem\nText und versucht zu verstehen was diese bewirken.\nArbeite durch die Übungen aus Kapitel 5.4.1\n- Exercises. Stelle Fragen in unserem Slack Channel für den\nKurs.\n🧶 ✅ ⬆️ Knit, commit und push deine Änderungen auf GitHub mit\neiner Commit-Nachricht deiner Wahl. Achte darauf, alle geänderten\nDateien zu committen und zu pushen, damit dein Git-Fenster danach\naufgeräumt ist.\n\n\n\n",
      "last_modified": "2022-04-20T10:54:05+02:00"
    },
    {
      "path": "ha-04-mehr-dplyr.html",
      "title": "Hausaufgabe 04 - Lernende im Kanton Zürich",
      "author": [],
      "contents": "\n\nContents\nZiele\nErste Schritte\nPackages\nData\nÜbersicht\nüber alle Lernenden im Kanton Zürich\n\nAufwärmen\nÜbungen - Lernende im\nKanton Zürich\nÜbung 1 - Daten\nImportieren\nÜbung 2 - Daten\nbeschreiben\nÜbung 3 - Daten\nvisualisieren\nÜbung 4 - Daten\neingrenzen\nÜbung 5 - Daten\nzusammenfassen\nÜbung 6 - Kurzanalyse\n\n\nIn dieser Hausaufgabe nutzen wir Daten aus der Bildungsstatistik des\nKantons Zürich und werden diese mit uns bekannten Werkzeugen erkunden\nund visualisieren.\nZiele\nDiese Hausaufgabe hat die folgenden Ziele:\nErfahrungen mit den Hauptfunktionen des {dplyr} Package\nsammeln\nDie Elemente einer vorgegebenen `{ggplot2}´ Visualisierung zu\nidentifizieren und diese zu rekunstrieren\nErste Schritte\nÖffne deine Email Inbox und suche nach der Email mit dem Link für das\nGitHub Repo zu dieser Hausaufgabe (ha-04-mehr-dplyr). Alternativ kannst\ndu GitHub öffnen und in unserer GitHub Organisation nach dem Repo mit\ndeinem Namen suchen.\nFolge den Schritten aus Hausaufgabe 1 oder den Folien der Woche 2 um\ndas GitHub Repo in deine RStudio Cloud zu clonen.\nPackages\nIn dieser Hausaufgabe werden wir weiterhin hauptsächlich das R\nPackage {dplyr} aus der Sammlung der\n{tidyverse} Packages nutzen. Zusätzlich nutzen wir\nvereinzelt Funktionen aus R Packages, welche du noch nicht kennegelernt\nhast.\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(tidyr)  # Neu in dieser Hausaufgabe\n\n\n\nData\nÜbersicht über\nalle Lernenden im Kanton Zürich\nEin Datensatz publiziert von der Bildungsstatitik Kanton Zürich.\nDer Datensatz ist öffentlich auf\nopendata.swiss verfügbar und wird auch auf einer Seite der\nBildungsstatistik selbst mit Visualisierungen\ndargestellt.\nAufwärmen\nÖffne die R Markdown Datei für die Übung\nStricke die Datei zu einer HTML Datei\nAktualisiere den YAML Header in dem du deinen Namen und das Datum\nhinzufügst\nPasse das Aussehen des Dokuments über die “Output Options” an\nStricke das Dokument erneut\n🧶 ✅ ⬆️ Knit, commit und push deine Änderungen auf GitHub mit\neiner Commit-Nachricht deiner Wahl. Achte darauf, alle geänderten\nDateien zu committen und zu pushen, damit dein Git-Fenster danach\naufgeräumt ist.\nÜbungen - Lernende im\nKanton Zürich\nÜbung 1 - Daten Importieren\nIch habe die Daten für dich bereits importiert, auf das Jahr 2019\neingeschränkt und die NAs entfernt. Wir werden in allen folgenden\nÜbungen, bis auf Übung 6 dem Objekt lernende2019\narbeiten.\n\n\n# Der Link zu den Daten wird hier als Objekt gespeichert \n# und taucht oben rechts in deinem  \"Environment\" auf\nlink <- \"https://www.web.statistik.zh.ch/ogd/data/bista/ZH_Uebersicht_alle_Lernende.csv\"\n\n# Hier wird nun das Objekt \"link\" genutzt um die CSV zu lesen\nlernende <- read_csv(file = link, \n                     locale = locale(encoding = \"ISO-8859-1\"))\n\n\n\n\n\n# Ich habe die Daten hier auf das Jahr 2019 gefilterert und NAs entfernt\nlernende2019 <- lernende %>% \n   filter(Jahr == 2019) %>% \n   drop_na() # Die letzte Zeile 1960 weisst eine Zeile mit NAs auf\n\n\n\nÜbung 2 - Daten beschreiben\nIn dieser Übung geht es darum die Daten zu erkunden und zu\nbeschreiben. Dazu schauen wir uns auch nochmals die Variablen Typen\ninnerhalb des Dataframes lernende2019 an.\nVariablen können ganz allgemein in numerische und nicht-numerische\nunterteilt werden. Innerhalb der numerischen Variablen, wird zwischen\ndiskreten und kontinuierlichen Variablen unterschieden.\nDiskrete Variablen sind numerische Variablen, die\nzwischen zwei beliebigen Werten eine zählbare Anzahl von nicht negativen\nWerten aufweisen. Eine diskrete Variable ist immer numerisch. Beispiele:\nDie Anzahl Schüler in der Primarschule oder das Ergebnis eines Wurfs\neines Würfels.\nStetige (kontinuierliche) Variablen sind numerische\nVariablen, die zwischen zwei beliebigen Werten eine unendliche Anzahl\nvon Werten aufweisen. Stetige Variablen können aus numerischen oder\nDatums-/Uhrzeitwerten bestehen. Beispiel: die Länge eines Teils oder\nDatum und Uhrzeit eines Zahlungseingangs\nNicht-numerische Variablen werden auch als kategoriale Variablen\nbezeichnet.\nKategoriale Variablen umfassen eine endliche Anzahl\nvon Kategorien oder eindeutigen Gruppen. Kategoriale Daten müssen nicht\nzwangsläufig eine logische Reihenfolge aufweisen (z.B. Materialtyp,\nZahlungsmethode, Automarke). Wenn die Daten eine logische Reihenfolge\naufweisen, dann werden sie auch als ordinal bezeichnet (z.B. Wochentage,\nSchulnoten).\n\n\n\nDie Fragen für diese Übungen sind in der Vorlage für die Hausaufgabe\nhinterlegt.\nÜbung 3 - Daten\nvisualisieren\nIch habe hier einen Plot mit dem Dataframe lernende2019\nvorbereitet. In dieser Übung geht es darum, dass du die einzelnen\nElemente des Plots (x-Achse, y-Achse, etc.) studierst und versuchst den\nPlot selnst zu rekonstruieren.\nTipp: Nutze geom_col() und nicht\ngeom_bar()\n\n\n\nÜbung 4 - Daten eingrenzen\nDie Übung ist in der Vorlage für die Hausaufgabe beschrieben.\nÜbung 5 - Daten\nzusammenfassen\nIn den folgenden zwei Code-chunks findest du jeweils eine Code\nSequenz, welche eine Häufigkeitstabelle mit den Spalten\nSchultyp und n erstellt.\n\n\n# Häufigkeitstabelle 1 - Zusammenfassen mit count()\nlernende2019 %>% \n   count(Schultyp)\n\n\n\n\n\n# Häufigkeitstabelle 2 - Zusammfassen mit group_by %>% summarise()\nlernende2019 %>% \n   group_by(Schultyp) %>% \n   summarise(\n      n = n()\n   )\n\n\n\nVersuche den Code so anzupassen dass du folgendes Ergebnis\nerreichst:\n\n# A tibble: 6 × 2\n  Schultyp                    n\n  <chr>                   <dbl>\n1 Berufsfachschule        45508\n2 BrÃ¼ckenangebot          2073\n3 HÃ¶here Berufsbildung   19757\n4 Heim- und Sonderschule   3021\n5 Mittelschule            20591\n6 Volksschule            161073\n\nÜbung 6 - Kurzanalyse\nDer Code für diese Aufgabe ist vorbereitet. Es geht hier darum die\nLücken auszufüllen. Jede Lücke hat einen Platzhalter mit drei\nUnterstrichen ___, unabhänig davon wie viele Zeichen ersetzt werden\nsollen. Die Beschreibung der einzelnen Schritte ist in der Vorlage für\ndie Hausaufgabe.\n\nlernende ___  \n   drop____ %>% \n   group_by(___) %>% \n   summarise(\n      Total = ___(___)\n   ) %>% \n   mutate(\n      Differenz = Total - ___(Total)\n   ) %>% \n   mutate(\n      Veraenderung = case_when(\n         Differenz > ___ ~ \"Zunahme\",\n         Differenz < ___ ~ \"Abnahme\"\n      )\n   )\n\n🧶 ✅ ⬆️ Knit, commit und push deine Änderungen auf GitHub mit\neiner Commit-Nachricht deiner Wahl. Achte darauf, alle geänderten\nDateien zu committen und zu pushen, damit dein Git-Fenster danach\naufgeräumt ist.\n\n\n\n",
      "last_modified": "2022-04-20T10:54:07+02:00"
    },
    {
      "path": "ha-05-erstes-projekt.html",
      "title": "Hausaufgabe 05 - Erstes Projekt",
      "author": [],
      "contents": "\n\nContents\nZiele\nErste Schritte\nÜbungen\nÜbung 1 -\nErstelle ein eigenes Git Repository\nÜbung 2 -\nKlone ein öffentliches Git Repository\nÜbung 3 -\nFork ein öffentliches Git Repository\n\nGrosses “Danke Schön”\nund Gratulation!\n\n\n\n\nZiele\nDiese Hausaufgabe hat die folgende Ziele:\nEin Git Repository auf GitHub selbst erstellen\nEin selbst erstelltes Git Repository aus GitHub in die eigene\nArbeitsumgebung klonen\nEin öffentliches Git Repository aus GitHub in die eigene\nArbeitsumgebung klonen\nEine Fork von einem öffentlichem GitHub Repository zu erstellen\nDie Begriffe “add”, “commit,”push”, und “pull” unterscheiden\nkönnen\nErste Schritte\nHeute wirst du zum ersten Mal ein Projekt selbst erstellen. Dies\nbedeutet, ich habe keine Vorlage für dich vorbereitet welche aus GitHub\nin den Arbeitsbereich für die den Kurs gebracht wird. Die typischen\nersten Schritte fallen deshalb hier weg und wir steigen direkt mit den\nÜbungen ein.\nÜbungen\nÜbung 1 -\nErstelle ein eigenes Git Repository\nIm folgenden sind alle nötigen Schritte mit Beschreibung und\nScreenshots dokumentiert. Solltest du an einem Schritt nicht\nweiterkommen, dann melde dich bitte umgehend auf Slack.\nÖffne die GitHub website: github.com\nKlicke auf das schwarze Dreieck neben deinem Benutzernamen und in\ndem Dropdown Menü, wähle die GitHub Organisation für deinen Kurs\naus\n\n\n\nKlicke auf den grünen Button mit der Aufschrift “New” um ein neues\nRepository zu starten\n\n\n\nGib dem Respository den folgenden Namen und ersetze\n“GITHUB_BENUTZERNAME” mit deinem GitHub Benutzernamen:\nmein-erstes-repo-GITHUB_BENUTZERNAME\nBeachte: Namen für Repositories sollten kurz und\nohne Leerzeichen sein. Der Name sollte für dich bedeutend sein und\ngegebenenfalls den Namen des Projektes an welchem du arbeitest\nwiderspiegeln.\n(optional): Gib dem Repository eine Beschreibung im Feld\n“Description”\n\n\n\nWähle die Option “Public” aus. Dein Repository ist damit öffentlich\nsichtbar.\nSetze das Häkchen neben “Add .gitignore” und klicke auf das Feld\n“.gitignore template: None”\nSchreibe im Feld “Filter ignores” den Buchstaben “R”\nKlicke auf das blau hinterlegte Feld mit dem Buchstaben “R”\nBeachte: Die Datei .gitignore definiert\nwelche Dateien und/oder Ordner innerhalb eines Projektes\nnicht mit Git “verfolgt” werden sollen (ignoriert\nwerden). Dies bedeutet, diese Dateien und/oder Ordner tauchen nicht auf\nGitHub auf. Sie sind nur lokal auf deinem Arbeitsgerät zu finden. Oft\nsind dies Konfigurationsdateien mit sensitiven Informationen oder\nDateien die Nebenprodukte von der Arbeit mit R sind. Aber, dies können\nauch sensitive Daten innerhalb eines Projektes sein, welche nicht auf\nGitHub geteilt werden sollen, wobei jedoch der Code geteilt werden\nsoll.\n\n\n\nSetze kein Häkchen bei “Add a README file” und\n“Choose a license” und klicke auf “Create repository”\n\n\n\nBewundere dein neues Repo und sei nicht eingeschüchtert von dem\nschwer nach zu vollziehbaren Text.\nKlicke auf das Klemmbrett-Symbol um den Link zu deinem neuen\nRespository in die Zwischenablage zu kopieren\n\n\n\nÖffne die Website rstudio.cloud und logge dich wie gewöhnlich mit\ndeinen GitHub Zugangsadaten ein\nAchtung: Falls du dies noch nicht eingerichtet hast,\nsiehe Hausaufgabe\n01 - Verbindung zu GitHub und RStudio Cloud aufbauen.\n\n\n\nÖffne den Arbeitsbereich für deinen Kurs\n\n\n\nKlicke auf den Pfeil nach unten auf dem Button “New Project”\nKlicke auf “New Project from Git Repository”\n\n\n\nFüge den Link, welchen du von GitHub in deine Zwischenablage kopiert\nhast, hier in das Fenster “URL of your Git Repository” ein.\nLasse das Häkchen unter “Packages” gesetzt und klicke auf “OK”\n\n\n\nBewundere dein aus GitHub selbst erstelltes Projekt.\nIm Fenster unten rechts öffne den Reiter “Files” und klicke auf die\nDatei .gitignore um diese oben rechts im Code Editor zu\nöffnen.\nScroll durch die Datei und beachte, dass auf Zeile 2 die Datei\n.Rhistory ignoriert wird.\nSchliesse die .gitignore Datei wieder in dem du auf das\nkleine “x” neben dem Dateinamen oben rechts im Code Editor klickst\n\n\n\nÖffne den “Git” Reiter im Fenster oben rechts\nBeachte: Hier ist die Datei “project.Rproj”\naufgetaucht. Die zwei gelben Fragezeichen unter “Status” bedeuten, dass\ndiese Datei noch nicht von Git “verfolgt” wird. Die Datei wurde neu\nerstellt als du in RStudio Cloud auf “New Project” geklickt hast. Die\nDatei .gitignore taucht hier nicht auf. Git “verfolgt”\ndiese Datei bereits, da wir sie beim Erstellen des Repositories auf\nGitHub hinzugefügt haben. Auch die Datei .Rhistory taucht\nnicht auf, da wir in der .gitignore Datei definiert haben\ndiese nicht zu “verfolgen”.\n\n\n\nSetze nun den Haken unter “Staged” und klicke auf den “Commit”\nButton woraufhin sich ein neues Fenster öffnet.\n\n\n\nBeachte: Der Status ändert sich zu einem grünen A\nwelches für “add” steht. Du hast Git nun signalisiert, dass diese Datei\nzu dem Git Repository hinzugefügt werden soll. Der Haken unter staged,\nbedeutet, dass diese Datei im nächsten Commit enthalten sein soll.\n\n\n\nIm Feld “Commit message”, schreibe: “R Project gestartet”\nKlicke auf den “Commit” Button unter dem Feld, welches die Commit\nNachricht enthält. Ein neues Fenster öffnet sich.\n\n\n\nSchliesse das neue Fenster indem du auf den “Close” Button klickst.\nSchliesse auch den Browser Tab, welches sich geöffnet hatte um die\nCommit Nachricht zu schreiben.\n\n\n\nZurück im Browser Tab mit dem geöffneten RStudio Projekt, öffne\nerneut die Datei .gitignore. Scroll ganz an das Ende der\nDatei auf die Zeile 40 und füge eine neue Zeile ein indem du auf die\nEnter Taste auf deiner Tastatur drückst. Füge Text mit einem # hinzu und\nschreibe “# Ignoriere folgende Dateien”. Auf einer neuen Zeile, schreibe\n*.csv. Speicher die Datei in dem du das Tastaturkürzel\n“Ctrl + S (Windows)” nutzt oder auf: File -> Save in RStudio\nklickst\n\n\n\nBeachte: Du sagst Git hier, dass alle Dateien in\ndeinem Projekt mit der Endung .csv ignoriert werden\nsollen.\nÖffne den Git Reiter im Fenster oben rechts, setzte den Haken bei\nstaged um die Veränderungen im nächsten Commit hinzuzfügen, und klicke\nauf den Commit Button.\n\n\n\nBeachte: Hier ist die Datei “.gitignore”\naufgetaucht. Falls nicht, dann klicke auf den “Aktualisieren Button”\nganz rechts neben “main”. Das blaue M steht für “modified” (de:\nverändert). Git verfolgt diese Datei bereits und hat hier gemerkt, dass\nVeränderung an der Datei gemacht wurden. Der Status ändert sich nicht,\naber das blaue M bewegt sich etwas nach links. Die Dateu ist erneut\n“staged” und Git wird damit signalisiert, dass diese im nächsten Commit\nenthalten sein soll.\nSchaue nun in das untere Fenster, welches in dem grünen Bereich die\nVeränderungen anzeigt, welche du an der .gitignore Datei\ngemacht hast.\n\n\n\nIm Feld “Commit message”, schreibe: “Ignoriere CSV Dateien”\nKlicke auf den “Commit” Button unter dem Feld, welches die Commit\nNachricht enthält. Ein neues Fenster öffnet sich. Schliesse das neue\nFenster indem du auf den “Close” Button klickst. Mache keinen\npush.\n\n\n\nErstelle eine neue Markdown Datei (Achtung: Nicht R\nMarkdown): File -> New File -> Markdown File, und speicher die\nDatei mit dem Tastaturkürzel “Ctrl + S” (Windows) oder: File -> Save.\nEin neues Fenster öffnet sich.\n\n\n\nIm Feld “File name:”, schreibe “README”\nKlicke auf den Save Button\n\n\n\nBeachte: Im Fenster oben rechts unter dem Git Reiter\nist nun die Datei “README.md” nun mit zwei gelben Fragezeichen hinter\n“Status” aufgetaucht. Du hast bereits gelernt, was dies bedeutet. Kannst\ndu dich erinnern?\nGehe erneut durch die Schritte Add, Commit, und wähle “README\nhinzugefügt” als Commit message. Mache jedoch mache weiterhin\nkeinen push.\n\n\n\nZurück im Browser Tab mit dem geöffneten RStudio Projekt, schreibe\nnun einen Text deiner Wahl in deine README Datei. Anschliessend, klicke\nauf den “Preview” Button um dir eine Vorschau deiner README Datei\nanzusehen.\n\n\n\nÖffne den “Git” Reiter im Fenster oben rechts. Setze den Haken\nnur neben der README.md Datei und mache\neinen Commit mit einer Commit Nachricht deiner Wahl. Mache jedoch mache\nweiterhin keinen push.\n\n\n\nBeachte: Die README.md Datei wird mit\neinem blauen M als “modified” angezeigt. Git “verfolgt” diese bereits\nund hat gemerkt, dass du Veränderungen gemacht hast. Neu taucht hier die\nREADME.html Datei auf. Diese ist enstanden nachdem du auf\nden Preview Button geklickt hast.\nZurück im Browser Tab mit dem geöffneten RStudio Projekt, öffne die\n.gitignore Datei. Auf einer neuen Zeile, schreibe\nREADME.html. Speicher die .gitingore\nDatei\n\n\n\nIm Git Fenster oben rechts, klicke auf den Aktualisieren Button. Die\nREADME.html ist hier nun verschwunden und die\n.gitignore Datei taucht hier wieder auf. Warum? Setze den\nHaken neben .gitignore und mache einen Commit mit der\nCommit Nachricht “Ignoriere README.html”. Mache jedoch mache weiterhin\nkeinen push.\n\n\n\nKlicke nun auf den “Push” Button (grüner Pfeil der nach oben zeigt)\num deine Veränderung auf GitHub zu pushen.\nBeachte: Im Git Fenster oben rechts siehst du nun\neine Zeile mit dem Text\nYour branch is ahead of 'origin/main' by 5 commits. Dies\nbedeutet: Git hat bei dir lokal in deinem Projekt fünf Commits\nregistriert, welche noch nicht auf GitHub sind.\n\n\n\nGehe zurück zu deinem Repo auf github.com, aktualisiere die Seite,\nund schau dich etwas um. Versuche auf die Dinge zu klicken die du wieder\nerkennen kannst. Unten ein paar Beispiele zum darauf klicken.\n\n\n\nKlicke auf den “Settings” Button um die Einstellungen für das\nRepository zu öffnen\n\n\n\nKlicke auf “Manage access” links in der Auswahlleiste\nKlicke auf den Button “Invite teams or people”\n\n\n\nIm sich öffnenden Fenster schreibe: “larnsce”\nKlicke auf den blau hinterlegten Bereich\nIm sich öffnenden Fenster, setzte den blauen Kreis auf “Admin” und\nklicke auf “Add larnsce to this repository”\n\n\n\nBeachte: Das Repository ist “public” und damit\nöffentlich sichbar. Jede Person kann dieses Repository “clonen” und\ndamit in RStudio weiterarbeiten. So wie du es am Anfang gemacht hast um\nes in die RStudio Cloud zu bringen. Aber: Nicht jede Person kann auch\nwieder zurück auf diese Repository “pushen” und damit Veränderung an\ndeiner Version machen. Du hast mich gerade als Admin hinzugefüght, damit\nich jegliche Zugangsrechte habe. Wenn du gemeinsam mit Personen aktiv an\neinem Repository arbeitest, empfiehlt es sich diesen mindestens die\nRolle mit “Write” Zugang zu geben. Dies ermöglicht es wieder auf das\nRepo zu “pushen”.\nÜbung 2 - Klone\nein öffentliches Git Repository\nLetzte Woche haben wir im Kurs eine Demonstrationseinheit zu Vektoren\ngemacht (Demonstration 2). Für diese Einheit hatte ich keine Vorlage für\ndich bereitgestellt und dich darum gebeten nicht selbst aktiv\nmitzuschreiben. Die Demonstration 2 ist als öffentliches Git Repository\nauf GitHub publiziert. Dies bedeutet, dass du dir sämtlichen Code aus\nden Übungen selbst in deine Arbeitsumgebung klonen kannst.\nÖffne das Repository auf GitHub: https://github.com/rstatsZH/demo-02-vektoren und nutze\ndie dir bekannten Schritte um dieses Repository\n(rstatsZH/demo-02-vektoren) in die Arbeitsumgebung für den Kurs (RStudio\nCloud Workspace rstatsZH-K00X) zu klonen.\n\n\n\nÖffne die R Markdown Datei “demo-02-solutions.Rmd”\nStricke die R Markdown Datei “demo-02-solutions.Rmd”\nÖffne das Git Fentser oben rechts, und:\nadd “demo-02-solutions.html”\ncommit “demo-02-solutions.html”\n\nPush deine Veränderungen auf zurück auf GitHub. Was sagt die\nFehlermeldung? Was könnte dies bedeuten und wie könnte dies behoben\nwerden?\nÜbung 3 - Fork\nein öffentliches Git Repository\nIn Übung 1 hast du gelernt wie man jemanden als Collaborator zu einem\nGit Repository auf GitHub hinzufügt. In Übung 2 hast du gesehen, was\npassiert wenn du ein öffentliches GitHub Respository klonst aber selbst\nkein Collaborator bist. Diese Übung soll dir nun zeigen, wie du mit\neinem öffentlichen Repository selsbtständig weiterarbeiten kannst und\ndeine Veränderung zurück auf GitHub pushen kannst.\nÖffne das Repository auf GitHub: https://github.com/rstatsZH/demo-02-vektoren und klicke\nauf den “Fork” Button. Ein neues Fenster öffnet sich.\n\n\n\nKlicke auf deinen Benutzernamen.\n\n\n\nSchau dir den Namen des Repository genau an. Was könnte dies\nbedeuten?\n\n\n\nNutze die dir bekannten Schritte um dieses Repository\n(DEINNAME/demo-02-vektoren) in die Arbeitsumgebung für den Kurs (RStudio\nCloud Workspace rstatsZH-K00X) zu klonen\nÖffne die die R Markdown Datei “demo-02-solutions.Rmd”\nStricke die R Markdown Datei “demo-02-solutions.Rmd”\nÖffne das Git Fentser oben rechts, und:\nadd “demo-02-solutions.html”\ncommit “demo-02-solutions.html”\n\nPush deine Veränderungen auf zurück auf GitHub.\nGrosses “Danke Schön” und\nGratulation!\nDu hast soeben den Grundstein für ein Verständnis über kollaboratives\nArbeiten mit Git und GitHub gelegt. Danke, dass du die mehr als 50\nSchritte durchgegangen bist! Es ist weiterhin völlig normal wenn sich\ndas was dort im Hintergund passiert fremd und ungeheuerlich anfühlt.\nErst wenn diese Schritte dutzende Male durchgeführt wurden und effektiv\nmit Anderen an Projekten gearbeitet wird, bildet sich ein Verständnis\nfür die Prozesse die dort im Hintergrund laufen.\n\n\n\n",
      "last_modified": "2022-04-20T10:54:08+02:00"
    },
    {
      "path": "ha-06-projektarbeit.html",
      "title": "Hausaufgabe 06 - Projektarbeit",
      "author": [],
      "contents": "\n\nContents\nZiele\nErste Schritte\nÜbungen - Teil 1 -\nProjektarbeit\nInstallation von R,\nRStudio und Git\nDaten für das Projekt\nGitHub Repository\nerstellen\n\nÜbungen - Teil 2 -\nTreibhausgase\nÜbung 1 - Daten\nimportieren\nÜbung 2\n- Daten transformieren und visualisieren\n1. Pivoting\n2. Daten\nzusammenfassen und neue Variable erstellen\n3. Daten visualisieren 1\n4. Daten visualisieren 2\n(Bonus)\n\n\n\n\n\n\nZiele\nDiese Hausaufgabe hat die folgende Ziele:\nEin RStudio Project mittels eines selbst erstellten GitHub\nRepositories auf dem eigenen Arbeitsgerät starten\nDaten für eine Projektarbeit identifizieren\nMehr Erfahrungen mit dem Tranformieren und Visualisieren von Daten\nsammeln\nSQL Befehle in Code-chunks innerhalb einer R Markdown Datei\nausführen\nErste Schritte\nDiese Hausaufgabe besteht aus zwei Teilen:\nProjektarbeit (Pflicht)\nDaten über Treibhausgase in der Stadt Zürich (Zum Teil\nBonusmaterial)\nÖffne deine Email Inbox und suche nach der Email mit dem Link für das\nGitHub Repo zu dieser Hausaufgabe (ha-06-projekarbeit).\nÜbungen - Teil 1 -\nProjektarbeit\nIm Anschluss an die sieben Kurseinheiten bekommt ihr die Gelegenheit\nals Teil eines kleinen Abschlussprojektes Unterstützung zu erhalten.\nDafür braucht es ein paar Vorraussetzungen:\nR, RStudio und Git sind auf euren Arbeitsgeräten installiert\nDaten für die Projektarbeit sind ausgewählt\nEin öffentliches (public) GitHub Repository wurde erstellt\noder ein geschlossenes (private) GitHub Repository\nwurde erstellt zu welchem der GitHub Benutzer larnsce als Collaborator\nhinzugefügt wurde.\nBeachte: Auch Projekte mit sensitiven und\nschützenswerten Daten können öffentlich publiziert werden. Dazu werden\nOrdner und/oder Dateien mit den zu schützenden Daten in der\n.gitignore Datei hinzugefügt. Somit wird erreicht, dass die\nDaten nicht zugänglich sind, jedoch der Code für die Arbeit mit den\nDaten, was deutlich zu einer transparenten Arbeitsweise beiträgt auch\nwenn die Ergebnisse nicht reproduzierbar sind. Dabei wird empfohlen sich\ninnerhalb der Verwaltungseinheit mit den zuständigen Mitarbeiter_innen\nfür Datenschutz in Verbindung zu setzen.\nDas GitHub Repository auf das eigene Arbeitsgerät klonen und daraus\nein RStudio Project machen\nDiese Übung soll sicherstellen, dass all diese Vorraussetzungen\nerfüllt sind.\nInstallation von R, RStudio\nund Git\nFalls die Software noch nicht vorhanden ist, wende dich an die IT\nUnterstützung um die nötige Software installiert zu bekommen. Du kannst\nin der Zwischenzeit bis zu dem Punkt fortfahren an dem ich dich bitte\nRStudio auf deinem Arbeitsgerät zu öffnen.\nListe mit Software für IT: https://github.com/rstatsZH/kochbuch/tree/main/01-Installation\nDaten für das Projekt\nIdeale Daten für das Projekt gibt es nicht, jedoch ist es sinnvoll\nnicht unbedingt Daten auszuwählen welche streng vertraulich sind, oder\nDaten welche Teil eines sehr grossen Projektes sind. Bereits öffentlich\nverfügbare Daten sind wertvoll wenn es euch wichtig ist das Projekt\nöffentlich und reproduzierbar zu publizieren. Das wichtigste Kritierium\nan die Daten ist jedoch, dass ihr Interesse daran habt den Datensatz zu\nerkunden und Fragen zu stellen und zu beantworten.\nEinen Datensatz, oder mehrere Datensätze, für das Projekt\nidentifizieren.\nGitHub Repository erstellen\nWie das geht hast du in Übung\n1 der Hausaufgabe aus Woche 5 gelernt. Falls du Schwierigkeiten hast\nmeiner Anleitung zu folgen, melde dich umgehend und ich kann dich\nunterstützen.\nAbweichend von der Anleitung ist Folgendes:\n1 und 2. Schritt: Diese Schritte kannst du überspringen und das neue\nRepository unter deinem Benutzernamen erstellen. Beginne also mit dem 3.\nSchritt und erstelle ein neues Repository in deinem persönlichen\nBenutzer Account.\nSchritt: Überlege dir hier einen eigenen, sinnvollen Namen für das\nRepository\n\nSchritt: Entscheide hier selbst darüber ob du das Repository\nöffentlich (public) oder geschlossen (private) zugänglich machen\nmöchtest.\n\nAuch wird dieses Mal kein Project in der RStudio Cloud erstellt,\nsondern auf deinem eigenen Arbeitsgerät. Überspringe deshalb die\nSchritte 12 bis 17 und ersetze diese durch Folgendes:\nÖffne RStudio auf deinem Arbeitsgerät\nKlicke auf File > New Project. Ein neues Fenster öffnet\nsich.\n\n\n\nKlicke auf “Version Control”, dann klicke auf “Git”\n\n\n\nFüge die URL aus deiner Zwischenablage im Feld “Repository URL” ein.\nIm Feld “Project directory name:” wird der Name des Repositories\nübernommen.\nWähle über den Button “Browse…” den Ordner auf deinem Arbeitsgerät\naus, in dem du das Repository speichern möchtest (Tipp:\nIch empfehle einen Ordner names “gitrepos” zu erstellen, welcher sich so\nnah wie möglich am Stammpfad des Laufwerks (Lokaler Datenträger) auf\ndeinem Arbeitsgerät befindet. Im Windows Betriebssystem ist dies\nüblicherweise “C:”. As bietet sich an, an dem Ort ‘C:’ nur Ordner\nanzulegen, welche auch ein Git Repository sind. Dies erlaubt eine\nsaubere Trennung zwischen allgemeinen Ordnern auf deinem Arbeitsgerät\nund solchen die ein Git Repository sind.\n\n\n\nKlicke auf “Create Project”, was für dich die folgenden drei Dinge\nerstellt\nein Ordner auf deinem Arbeitsgerät\nein lokales Git Repository welches mit einem remote GitHub\nRepository verbunden ist\nein RStudio Project\n\nBetrachte dein offenes RStudio Project\nFolge nun noch den Schritten 38 bis 43 aus der Hausaufgabe 5.\nAls nächstes könntest du mittels eines Dateimanagers (z.B. Windows\nFile Explorer) deine Daten für das Projekt in dieses Repository\nkopieren. Es empfiehlt sich dazu innerhalb des Repositories einen Ordner\nnamens “data” zu erstellen und die Daten dort abzulegen.\n\n\n\nWie du nun weiter machst ist dir überlassen. Möchtest du nicht, dass\ndie Daten welche lokal gespeichert sind auf GitHub auftauchen? Dann füge\nden Pfad an dem diese liegen zu deiner .gitignore Datei\nhinzu (siehe Screenshot und ersetze den Namen data ggf. durch den Namen\nden du für diesen Ordner gewählt hast.\n\n\n\nAuch ist es nützlich eine README.md Datei zu erstellen und diese im\nStammpfad des Repositories zu speichern. In der README kannst du dein\nProjekt beschreiben oder wichtige Vorraussetzungen für die Nutzung und\nWiederverwendbarkeit deklarieren (Lizenzen).\nSobald du zufrieden bist mit dem Aufbau deines Projektordners kannst\ndu deine Veränderung mittels den dir bekannten Schritten und unter dem\nGit Reiter oben rechts in RStudio zurück auf GitHub pushen.\nÜbungen - Teil 2 -\nTreibhausgase\nÜbung 1 - Daten importieren\nDie Aufgaben für diese Übung sind in der Vorlage hinterlegt.\nÜbung 2 -\nDaten transformieren und visualisieren\n1. Pivoting\nDie Daten sind derzeit in einem weiten Format. Das Ziel ist die Daten\nin ein langes Format zu bringen wobei nur die Spalte Jahr beibehalten\nwird und alle Spalten von Strom bis Heizoel_EL gedreht werden. Ich habe\ndir hier bereits etwas Code mit Lücken als Hilfestellung\nvorbereitet.\nErstelle ein neues Objekt in deiner Arbeitsumgebung (Environment),\nwelches im langen Format ist in dem du die Lücken ausfüllst. Den Namen\nfür das Objekt kannst du selbst auswählen.\nStrick das Dokument und dann: git add, commit, push alle Veränderung\nzurück auf GitHub\n\n___ <- ___ %>% \n  ____longer(\n    \n    # In diesem Argument werden die Spalten ausgewählt welche gedreht werden\n    ___ = !Jahr,            \n    \n    # In diesem Argument wird der Name für die neue Spalte definiert, welche\n    # die Namen aus den zuvor ausgewählten Spalten enthält\n    ___ = \"Energietraeger\", \n    \n    # In diesem Argument wird der Name für die neue Spalte definiert, welche\n    # die Werte aus den zuvor ausgewählten Spalten enhält\n    ___ = \"Emissionen\"\n  )\n\n2. Daten\nzusammenfassen und neue Variable erstellen\nDie Aufgaben für diese Übung sind in der Vorlage für die Hausaufgabe\nhinterlegt.\n3. Daten visualisieren 1\nStarte mit dem Objekt, welches du in Schritt 3 der vorheringen Übung\nerstellt hast\nErstelle ein Säulendiagram und lege das Jahr auf die x-Achse und die\nDifferenz der Emissionen zwischen den Jahren auf die y-Achse\nBonus: Warum ist auf der x-Achse immer nur für alle\nzehn Jahre ein Tick mit Beschriftung?\nBonus: Wandle den Typen der Variable “Jahr” in eine\nVariable mit dem Typ Faktor um bevor du den Plot erstellst\nBonus: Passe das Layout des Plots beliebig an\n4. Daten visualisieren 2\n(Bonus)\nNutze das Objekt welches du in “2.1 Pivoting” erstellt hast, und:\nNutze die Funktion group_by() um die Daten nach dem\nJahr zu gruppieren\nNutze die Funktion filter() um in der Spalte Jahr nur\ndas Jahr 1990 und das Jahr 2016 anzuzeigen\nWieviele Wege fallen dir ein um auf das Ergebnis zu kommen?\n\nSpeicher das Ergebnis als ein neues Objekt in deiner Arbeitsumgebung\n(Environment) mit einem Namen deiner Wahl\nReproduziere folgendes verbundenes Säulendiagramm\n\n\n\n\n\n\n",
      "last_modified": "2022-04-20T10:54:09+02:00"
    },
    {
      "path": "ha-99-sql-rmarkdown.html",
      "title": "Hausaufgabe Extra - SQL in R Markdown",
      "author": [],
      "contents": "\n\nContents\nZiele\nÜbungen - SQL Befehle in R\nÜbung\n0 - Verbindung zu einer Datenbank herstellen\nÜbung 1 -\nTabellen in einer Datenbank erkunden\nÜbung 2 - SQL\nCode-chunk einfügen\nÜbung 3 - SQL Code\nschreiben\nÜbung 4 - SQL\nAbruf als Objekt speichern\n\n\n\n\n\nZiele\nDiese Übungen wurden erstellt um das Arbeiten mit SQL Code in R\nMarkdown zu lernen. Der Inhalt ist nur Bestandteil des Kurses falls bei\nden Teilnehmer_innen ein besonderes Interesse am Arbeiten mit SQL\nDatenbanken besteht. In diesem Fall sind die Übungen Teil der\nHausaufgabe 6.\nÜbungen - SQL Befehle in R\nIn R Markdown Dokumenten kann Code aus verschiedenen\nProgrammiersprachen ausgeführt werden. Dies wird mittels der Code-chunks\ngesteuert und es erlaubt Nutzer_innen die Effizienz von SQL Datenbanken\nmit den Stärken von R zu verbinden.\nÜbung 0 -\nVerbindung zu einer Datenbank herstellen\nIn dieser Übung nutzen wir die Verbindung zu einer Datenbank welche\nich mittels des folgenden Codes erstellt habe. In der Praxis wird hier\ndie Verbindung zu der Datenbank erstellt, welche von der\nVerwaltungseinheit gepflegt wird.\nDer Name des Objektes mit der Verbindung zur Datenbank ist hier\ncon, es kann jedoch ein beliebiger Name gewählt werden.\n\n\nlibrary(DBI)\n\ncon <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\")\n\n\n\nÜbung 1 -\nTabellen in einer Datenbank erkunden\nIch habe auch mittels des folgenden Codes den penguins\nDatensatz aus dem palmerpenguins Package in die Datenbank\nkopiert. Die Tabelle ist jetzt in unserer Datenbank hinterlegt.\nFühre den Code-chunk aus\n\n\n\nFühre den Befehl dbListTables(con) im folgenden R\nCode-chunk aus\nFühre den Befehl dbListFields(con, \"penguins) im\nfolgenden R Code-chunk us\n\n\n\nÜbung 2 - SQL Code-chunk\neinfügen\nKlicke auf das kleine grüne C+ im oberen Bereich des Fensters. Ein\nDropdown Menü öffnet sich.\nKlicke auf das SQL Symbol\nFüge das Objekt con hinter das “=” Zeichen im obersten\nBereich des Code-chunk. Dies sollte folgendermassen aussehen:\n{sql connection=con}\nSchreibe nun SELECT * FROM penguins in den\nCode-chunk\nFühre den Code-chunk aus\n\n\n\nÜbung 3 - SQL Code schreiben\nFüge einen SQL Code-chunk hinzu mit einer Verbindung zum Objekt\ncon\nSchreibe dir bekannten SQL Code um die durchschnittliche\nSchnabellänge (Variable: bill_length_mm) gruppiert nach den\nVariablen island und species zu berechnen\nFühre den Code-chunk aus\n\n\n\nÜbung 4 - SQL Abruf\nals Objekt speichern\nKopiere den Code-chunk aus der vorherigen Übung\nFüge nach “con” ein Komma ein und dann\noutput.var=\"penguins_avg\" um den Output des Code-chunks als\nObjekt in einer Arbeitsumgeung (Environment) zu speichern. Dies sollte\nfolgendermassen aussehen:\n{sql connection=con, output.var=\"penguins_avg\"}\nFühre den Code-chunk aus und überprüfe ob das Objekt in deiner\nArbeitsumgebung (Environment) auftaucht\n\n\n\n\n\n\n",
      "last_modified": "2022-04-20T10:54:10+02:00"
    },
    {
      "path": "index.html",
      "title": "rstatsZH - Data Science mit R",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-04-20T10:54:10+02:00"
    }
  ],
  "collections": ["posts/posts.json"]
}
